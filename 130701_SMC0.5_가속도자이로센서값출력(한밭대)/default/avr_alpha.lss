
avr_alpha.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00802000  00001d50  00001de4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000ae0  0080202c  0080202c  00001e10  2**0
                  ALLOC
  3 .debug_aranges 00000218  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000d2d  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003f59  00000000  00000000  00002d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087e  00000000  00000000  00006cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c59  00000000  00000000  0000752c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  00009188  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000015f9  00000000  00000000  00009538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001630  00000000  00000000  0000ab31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a0  00000000  00000000  0000c161  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	//TCC1.PERH=0b01101000;//PER 가 period를 조절할 수 있는 부분임
	//TCC1.PERL=0b00101011; //150Hz

	
}
void int_init(void){
       0:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__ctors_end>
                   SPI_t *module,
                   PORT_t *port,
                   bool lsbFirst,
                   SPI_MODE_t mode,
                   SPI_INTLVL_t intLevel)
{
       4:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
 *  \param usart_data         The USART_data_t struct instance
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
       8:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
       c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      10:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      14:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      18:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      1c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      20:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      24:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      28:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      2c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      30:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      34:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      38:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      3c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      40:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      44:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      48:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      4c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      50:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_20>
      54:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      58:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      5c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      60:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      64:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__vector_25>
      68:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      6c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      70:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      74:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      78:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      7c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      80:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      84:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      88:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      8c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      90:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      94:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      98:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      9c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      a0:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      a4:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      a8:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      ac:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      b0:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      b4:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      b8:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      bc:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      c0:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      c4:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      c8:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      cc:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      d0:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      d4:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      d8:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      dc:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      e0:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      e4:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      e8:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__vector_58>
      ec:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      f0:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      f4:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      f8:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
      fc:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     100:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     104:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     108:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     10c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     110:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     114:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     118:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     11c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     120:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     124:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     128:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     12c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     130:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     134:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     138:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     13c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     140:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     144:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     148:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     14c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     150:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     154:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     158:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     15c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     160:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__vector_88>
     164:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     168:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     16c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     170:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     174:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     178:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     17c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     180:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     184:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     188:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     18c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     190:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     194:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     198:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     19c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     1a0:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     1a4:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     1a8:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     1ac:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     1b0:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     1b4:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     1b8:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     1bc:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     1c0:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>
     1c4:	0c 94 86 01 	jmp	0x30c	; 0x30c <__bad_interrupt>

000001c8 <__c.1790>:
     1c8:	6e 61 6e 00                                         nan.

000001cc <__c.1788>:
     1cc:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1dc:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1ec:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1fc:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     20c:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     21c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     22c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     23c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     24c:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     25c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     26c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     27c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     28c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     29c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ac:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2bc:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002ca <__ctors_end>:
     2ca:	11 24       	eor	r1, r1
     2cc:	1f be       	out	0x3f, r1	; 63
     2ce:	cf ef       	ldi	r28, 0xFF	; 255
     2d0:	df e3       	ldi	r29, 0x3F	; 63
     2d2:	de bf       	out	0x3e, r29	; 62
     2d4:	cd bf       	out	0x3d, r28	; 61
     2d6:	00 e0       	ldi	r16, 0x00	; 0
     2d8:	0c bf       	out	0x3c, r16	; 60

000002da <__do_copy_data>:
     2da:	10 e2       	ldi	r17, 0x20	; 32
     2dc:	a0 e0       	ldi	r26, 0x00	; 0
     2de:	b0 e2       	ldi	r27, 0x20	; 32
     2e0:	e0 e5       	ldi	r30, 0x50	; 80
     2e2:	fd e1       	ldi	r31, 0x1D	; 29
     2e4:	00 e0       	ldi	r16, 0x00	; 0
     2e6:	0b bf       	out	0x3b, r16	; 59
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <__do_copy_data+0x14>
     2ea:	07 90       	elpm	r0, Z+
     2ec:	0d 92       	st	X+, r0
     2ee:	ac 32       	cpi	r26, 0x2C	; 44
     2f0:	b1 07       	cpc	r27, r17
     2f2:	d9 f7       	brne	.-10     	; 0x2ea <__do_copy_data+0x10>

000002f4 <__do_clear_bss>:
     2f4:	1b e2       	ldi	r17, 0x2B	; 43
     2f6:	ac e2       	ldi	r26, 0x2C	; 44
     2f8:	b0 e2       	ldi	r27, 0x20	; 32
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <.do_clear_bss_start>

000002fc <.do_clear_bss_loop>:
     2fc:	1d 92       	st	X+, r1

000002fe <.do_clear_bss_start>:
     2fe:	ac 30       	cpi	r26, 0x0C	; 12
     300:	b1 07       	cpc	r27, r17
     302:	e1 f7       	brne	.-8      	; 0x2fc <.do_clear_bss_loop>
     304:	0e 94 19 03 	call	0x632	; 0x632 <main>
     308:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <_exit>

0000030c <__bad_interrupt>:
     30c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000310 <clk_init>:
uint8_t receiveArray[NUM_BYTES];

int RobotStateEstimation();

void clk_init(void){
	OSC.XOSCCTRL=0b11001011;//datasheet p89
     310:	8b ec       	ldi	r24, 0xCB	; 203
     312:	e0 e5       	ldi	r30, 0x50	; 80
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL=0x08;
     318:	88 e0       	ldi	r24, 0x08	; 8
     31a:	80 93 50 00 	sts	0x0050, r24
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
     31e:	80 91 51 00 	lds	r24, 0x0051
     322:	83 ff       	sbrs	r24, 3
     324:	fc cf       	rjmp	.-8      	; 0x31e <clk_init+0xe>
	//CCP=0x9D;
	CCP=0xD8;
     326:	88 ed       	ldi	r24, 0xD8	; 216
     328:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL=0x03;
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	80 93 40 00 	sts	0x0040, r24

}
     330:	08 95       	ret

00000332 <__vector_20>:
*/
volatile int samplingFlag=0;

int sfcnt=0;
ISR(TCC1_OVF_vect)
{
     332:	1f 92       	push	r1
     334:	0f 92       	push	r0
     336:	0f b6       	in	r0, 0x3f	; 63
     338:	0f 92       	push	r0
     33a:	11 24       	eor	r1, r1
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
	
	samplingFlag=1;
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	80 93 2c 20 	sts	0x202C, r24
     348:	90 93 2d 20 	sts	0x202D, r25
//	sei();
}
     34c:	9f 91       	pop	r25
     34e:	8f 91       	pop	r24
     350:	0f 90       	pop	r0
     352:	0f be       	out	0x3f, r0	; 63
     354:	0f 90       	pop	r0
     356:	1f 90       	pop	r1
     358:	18 95       	reti

0000035a <timer_Init>:


void timer_Init(void){
	
	//TCC0.CTRLA=0x04;//prescaler : clk/8
	TCC0.CTRLA=0x06;//prescaler : clk/256
     35a:	e0 e0       	ldi	r30, 0x00	; 0
     35c:	f8 e0       	ldi	r31, 0x08	; 8
     35e:	86 e0       	ldi	r24, 0x06	; 6
     360:	80 83       	st	Z, r24
	TCC0.CTRLB=0x00;
     362:	11 82       	std	Z+1, r1	; 0x01
	TCC0.CTRLC=0x00;
     364:	12 82       	std	Z+2, r1	; 0x02
	TCC0.CTRLD=0x00;
     366:	13 82       	std	Z+3, r1	; 0x03
	TCC0.CTRLE=0x00;
     368:	14 82       	std	Z+4, r1	; 0x04
	//TCC0.INTCTRLA=0x00;
	//TCC0.INTCTRLB=0xFF;//interrupt 관련 부분, 다시 체크할것
	//TCC0.INTFLAGS=0x01;//마지막 bit가 OVFIF: Overflow/Underflow Interrupt Flag
	TCC0.PERH=0xFF;//PER 가 period를 조절할 수 있는 부분임
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	87 a3       	std	Z+39, r24	; 0x27
	TCC0.PERL=0xFF;
     36e:	86 a3       	std	Z+38, r24	; 0x26

	TCC1.CTRLA=0x03;//prescaler : clk/4
     370:	e0 e4       	ldi	r30, 0x40	; 64
     372:	f8 e0       	ldi	r31, 0x08	; 8
     374:	83 e0       	ldi	r24, 0x03	; 3
     376:	80 83       	st	Z, r24
	//TCC1.CTRLA=0x04;//prescaler : clk/4
	TCC1.CTRLB=0x00;
     378:	11 82       	std	Z+1, r1	; 0x01
	TCC1.CTRLC=0x00;
     37a:	12 82       	std	Z+2, r1	; 0x02
	TCC1.CTRLD=0x00;
     37c:	13 82       	std	Z+3, r1	; 0x03
	TCC1.CTRLE=0x00;
     37e:	14 82       	std	Z+4, r1	; 0x04
	TCC1.INTCTRLA=0x02;
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	86 83       	std	Z+6, r24	; 0x06
	TCC1.INTCTRLB=0x00;//interrupt 관련 부분, 다시 체크할것
     384:	17 82       	std	Z+7, r1	; 0x07
	TCC1.INTFLAGS=0x01;//마지막 bit가 OVFIF: Overflow/Underflow Interrupt Flag
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	84 87       	std	Z+12, r24	; 0x0c

//	TCC1.PERH=0x90;
//	TCC1.PERL=0xAD;	//108Hz
	TCC1.PERH=0b10011100;
     38a:	8c e9       	ldi	r24, 0x9C	; 156
     38c:	87 a3       	std	Z+39, r24	; 0x27
	TCC1.PERL=0b01000000; //100Hz
     38e:	80 e4       	ldi	r24, 0x40	; 64
     390:	86 a3       	std	Z+38, r24	; 0x26
	//TCC1.PERH=0b01101000;//PER 가 period를 조절할 수 있는 부분임
	//TCC1.PERL=0b00101011; //150Hz

	
}
     392:	08 95       	ret

00000394 <port_init>:
void port_init(void){
	
//	PORTA.OUT=0x04;
//	PORTA.DIR=0xea;

	PORTA.OUT=0x04;
     394:	e0 e0       	ldi	r30, 0x00	; 0
     396:	f6 e0       	ldi	r31, 0x06	; 6
     398:	94 e0       	ldi	r25, 0x04	; 4
     39a:	94 83       	std	Z+4, r25	; 0x04
	PORTA.DIR=0x44;
     39c:	84 e4       	ldi	r24, 0x44	; 68
     39e:	80 83       	st	Z, r24
	
	PORTB.OUT=PORTB.OUT|0x04;
     3a0:	e0 e2       	ldi	r30, 0x20	; 32
     3a2:	f6 e0       	ldi	r31, 0x06	; 6
     3a4:	84 81       	ldd	r24, Z+4	; 0x04
     3a6:	84 60       	ori	r24, 0x04	; 4
     3a8:	84 83       	std	Z+4, r24	; 0x04
	PORTB.DIR=PORTB.DIR|0x04;
     3aa:	80 81       	ld	r24, Z
     3ac:	84 60       	ori	r24, 0x04	; 4
     3ae:	80 83       	st	Z, r24

//	PORTC.OUT=0xa7;
//	PORTC.DIR= PORTC.DIR | 0xa7;

	PORTC.OUT=PORTC.OUT|0x01;
     3b0:	e0 e4       	ldi	r30, 0x40	; 64
     3b2:	f6 e0       	ldi	r31, 0x06	; 6
     3b4:	84 81       	ldd	r24, Z+4	; 0x04
     3b6:	81 60       	ori	r24, 0x01	; 1
     3b8:	84 83       	std	Z+4, r24	; 0x04
	PORTC.DIR= 0xb9;
     3ba:	89 eb       	ldi	r24, 0xB9	; 185
     3bc:	80 83       	st	Z, r24
	
	PORTD.DIRSET = PIN3_bm;
     3be:	e0 e6       	ldi	r30, 0x60	; 96
     3c0:	f6 e0       	ldi	r31, 0x06	; 6
     3c2:	88 e0       	ldi	r24, 0x08	; 8
     3c4:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm;
     3c6:	92 83       	std	Z+2, r25	; 0x02
	
	PORTH.OUT=
	PORTH.DIR=
*/	

}
     3c8:	08 95       	ret

000003ca <uartC0SendTX>:
	do{}while(!USART_IsTXDataRegisterEmpty(&USARTC0));
		USART_PutChar(&USARTC0, data);

}

void uartC0SendTX(unsigned char *string){
     3ca:	fc 01       	movw	r30, r24
	int i=-1;
	do{
		uartC0SendTXbit(string[++i]);
     3cc:	90 81       	ld	r25, Z

}

void uartC0SendTXbit(unsigned char data){

	do{}while(!USART_IsTXDataRegisterEmpty(&USARTC0));
     3ce:	80 91 a1 08 	lds	r24, 0x08A1
     3d2:	85 ff       	sbrs	r24, 5
     3d4:	fc cf       	rjmp	.-8      	; 0x3ce <uartC0SendTX+0x4>
		USART_PutChar(&USARTC0, data);
     3d6:	90 93 a0 08 	sts	0x08A0, r25
     3da:	31 96       	adiw	r30, 0x01	; 1
void uartC0SendTX(unsigned char *string){
	int i=-1;
	do{
		uartC0SendTXbit(string[++i]);
	}
	while(string[i] != '\0');
     3dc:	99 23       	and	r25, r25
     3de:	b1 f7       	brne	.-20     	; 0x3cc <uartC0SendTX+0x2>
	
}
     3e0:	08 95       	ret

000003e2 <USART_INIT>:




void USART_INIT(void)
{
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
	/* This PORT setting is only valid to USARTC0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXC0) as output. */
	PORTC.DIRSET = PIN3_bm;
     3ea:	e0 e4       	ldi	r30, 0x40	; 64
     3ec:	f6 e0       	ldi	r31, 0x06	; 6
     3ee:	18 e0       	ldi	r17, 0x08	; 8
     3f0:	e1 2e       	mov	r14, r17
     3f2:	e1 82       	std	Z+1, r14	; 0x01

	/* PC2 (RXC0) as input. */
	PORTC.DIRCLR = PIN2_bm;
     3f4:	b4 e0       	ldi	r27, 0x04	; 4
     3f6:	fb 2e       	mov	r15, r27
     3f8:	f2 82       	std	Z+2, r15	; 0x02

	/* Use USARTC0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&USARTC0_data, &USARTC0, USART_DREINTLVL_LO_gc);
     3fa:	87 e9       	ldi	r24, 0x97	; 151
     3fc:	96 e2       	ldi	r25, 0x26	; 38
     3fe:	60 ea       	ldi	r22, 0xA0	; 160
     400:	78 e0       	ldi	r23, 0x08	; 8
     402:	41 e0       	ldi	r20, 0x01	; 1
     404:	0e 94 70 07 	call	0xee0	; 0xee0 <USART_InterruptDriver_Initialize>

	/* USARTC0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USARTC0, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     408:	e0 ea       	ldi	r30, 0xA0	; 160
     40a:	f8 e0       	ldi	r31, 0x08	; 8
     40c:	03 e0       	ldi	r16, 0x03	; 3
     40e:	05 83       	std	Z+5, r16	; 0x05

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(USARTC0_data.usart, USART_RXCINTLVL_HI_gc);
     410:	a0 91 97 26 	lds	r26, 0x2697
     414:	b0 91 98 26 	lds	r27, 0x2698
     418:	13 96       	adiw	r26, 0x03	; 3
     41a:	8c 91       	ld	r24, X
     41c:	13 97       	sbiw	r26, 0x03	; 3
     41e:	80 63       	ori	r24, 0x30	; 48
     420:	13 96       	adiw	r26, 0x03	; 3
     422:	8c 93       	st	X, r24
	 * Baudrate select = (1/(16*(((I/O clock frequency)/Baudrate)-1)
	 *                 = 12
	 */
//	USART_Baudrate_Set(&USARTC0, 8 , 0);

	USART_Baudrate_Set(&USARTC0, 16 , 1);		// 57600
     424:	10 e1       	ldi	r17, 0x10	; 16
     426:	16 83       	std	Z+6, r17	; 0x06
     428:	17 83       	std	Z+7, r17	; 0x07
//	USART_Baudrate_Set(&USARTC0, 16 , 0);		// 115200
	USARTC0.CTRLB|=0x04;                      //CLK2X
     42a:	84 81       	ldd	r24, Z+4	; 0x04
     42c:	84 60       	ori	r24, 0x04	; 4
     42e:	84 83       	std	Z+4, r24	; 0x04


	/* Enable both RX and TX. */
	USART_Rx_Enable(&USARTC0);
     430:	84 81       	ldd	r24, Z+4	; 0x04
     432:	80 61       	ori	r24, 0x10	; 16
     434:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USARTC0);
     436:	84 81       	ldd	r24, Z+4	; 0x04
     438:	88 60       	ori	r24, 0x08	; 8
     43a:	84 83       	std	Z+4, r24	; 0x04


	/* This PORT setting is only valid to USARTD0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXD0) as output. */
	PORTD.DIRSET = PIN3_bm;
     43c:	e0 e6       	ldi	r30, 0x60	; 96
     43e:	f6 e0       	ldi	r31, 0x06	; 6
     440:	e1 82       	std	Z+1, r14	; 0x01

	/* PC2 (RXD0) as input. */
	PORTD.DIRCLR = PIN2_bm;
     442:	f2 82       	std	Z+2, r15	; 0x02

	/* Use USARTD0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&USARTD0_data, &USARTD0, USART_DREINTLVL_LO_gc);
     444:	83 ec       	ldi	r24, 0xC3	; 195
     446:	93 e2       	ldi	r25, 0x23	; 35
     448:	60 ea       	ldi	r22, 0xA0	; 160
     44a:	79 e0       	ldi	r23, 0x09	; 9
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	0e 94 70 07 	call	0xee0	; 0xee0 <USART_InterruptDriver_Initialize>

	/* USARTD0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USARTD0, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     452:	e0 ea       	ldi	r30, 0xA0	; 160
     454:	f9 e0       	ldi	r31, 0x09	; 9
     456:	05 83       	std	Z+5, r16	; 0x05

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(USARTD0_data.usart, USART_RXCINTLVL_HI_gc);
     458:	a0 91 c3 23 	lds	r26, 0x23C3
     45c:	b0 91 c4 23 	lds	r27, 0x23C4
     460:	13 96       	adiw	r26, 0x03	; 3
     462:	8c 91       	ld	r24, X
     464:	13 97       	sbiw	r26, 0x03	; 3
     466:	80 63       	ori	r24, 0x30	; 48
     468:	13 96       	adiw	r26, 0x03	; 3
     46a:	8c 93       	st	X, r24
	 *                 = 12
	 */
//	USART_Baudrate_Set(&USARTC0, 8 , 0);

//	USART_Baudrate_Set(&USARTD0, 16 , 1);		// 57600
	USART_Baudrate_Set(&USARTD0, 16, 0);		// 115200, 하기소닉 x,y,theta 받을때의 baudrate
     46c:	16 83       	std	Z+6, r17	; 0x06
     46e:	17 82       	std	Z+7, r1	; 0x07
	USARTD0.CTRLB|=0x04;                      //CLK2X
     470:	84 81       	ldd	r24, Z+4	; 0x04
     472:	84 60       	ori	r24, 0x04	; 4
     474:	84 83       	std	Z+4, r24	; 0x04


	/* Enable both RX and TX. */
	USART_Rx_Enable(&USARTD0);
     476:	84 81       	ldd	r24, Z+4	; 0x04
     478:	80 61       	ori	r24, 0x10	; 16
     47a:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USARTD0);
     47c:	84 81       	ldd	r24, Z+4	; 0x04
     47e:	88 60       	ori	r24, 0x08	; 8
     480:	84 83       	std	Z+4, r24	; 0x04

	/* Enable PMIC interrupt level low. */
	PMIC.CTRL |= PMIC_LOLVLEX_bm;
     482:	e0 ea       	ldi	r30, 0xA0	; 160
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	82 81       	ldd	r24, Z+2	; 0x02
     488:	81 60       	ori	r24, 0x01	; 1
     48a:	82 83       	std	Z+2, r24	; 0x02


	/* This PORT setting is only valid to USARTE0 if other USARTs is used a
	 * different PORT and/or pins is used. */
	/* PIN3 (TXE0) as output. */
	PORTE.DIRSET = PIN3_bm;
     48c:	e0 e8       	ldi	r30, 0x80	; 128
     48e:	f6 e0       	ldi	r31, 0x06	; 6
     490:	e1 82       	std	Z+1, r14	; 0x01

	/* PC2 (RXE0) as input. */
	PORTE.DIRCLR = PIN2_bm;
     492:	f2 82       	std	Z+2, r15	; 0x02

	/* Use USARTE0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&USARTE0_data, &USARTE0, USART_DREINTLVL_LO_gc);
     494:	81 e1       	ldi	r24, 0x11	; 17
     496:	98 e2       	ldi	r25, 0x28	; 40
     498:	60 ea       	ldi	r22, 0xA0	; 160
     49a:	7a e0       	ldi	r23, 0x0A	; 10
     49c:	41 e0       	ldi	r20, 0x01	; 1
     49e:	0e 94 70 07 	call	0xee0	; 0xee0 <USART_InterruptDriver_Initialize>

	/* USARTE0, 8 Data bits, No Parity, 1 Stop bit. */
	USART_Format_Set(&USARTE0, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, false);
     4a2:	e0 ea       	ldi	r30, 0xA0	; 160
     4a4:	fa e0       	ldi	r31, 0x0A	; 10
     4a6:	05 83       	std	Z+5, r16	; 0x05

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(USARTE0_data.usart, USART_RXCINTLVL_LO_gc);
     4a8:	a0 91 11 28 	lds	r26, 0x2811
     4ac:	b0 91 12 28 	lds	r27, 0x2812
     4b0:	13 96       	adiw	r26, 0x03	; 3
     4b2:	8c 91       	ld	r24, X
     4b4:	13 97       	sbiw	r26, 0x03	; 3
     4b6:	8f 7c       	andi	r24, 0xCF	; 207
     4b8:	80 61       	ori	r24, 0x10	; 16
     4ba:	13 96       	adiw	r26, 0x03	; 3
     4bc:	8c 93       	st	X, r24

	USART_Baudrate_Set(&USARTE0, 16 , 1);		// 57600, 하기소닉 보드에 encoder 값 넣을 때의 baudrate
     4be:	16 83       	std	Z+6, r17	; 0x06
     4c0:	17 83       	std	Z+7, r17	; 0x07
	//USART_Baudrate_Set(&USARTE0, 16, 0);		// 115200
	USARTE0.CTRLB|=0x04;
     4c2:	84 81       	ldd	r24, Z+4	; 0x04
     4c4:	84 60       	ori	r24, 0x04	; 4
     4c6:	84 83       	std	Z+4, r24	; 0x04

	/* Enable both RX and TX. */
	USART_Rx_Enable(&USARTE0);
     4c8:	84 81       	ldd	r24, Z+4	; 0x04
     4ca:	80 61       	ori	r24, 0x10	; 16
     4cc:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&USARTE0);
     4ce:	84 81       	ldd	r24, Z+4	; 0x04
     4d0:	88 60       	ori	r24, 0x08	; 8
     4d2:	84 83       	std	Z+4, r24	; 0x04
	/* Enable PMIC interrupt level low. */
//	PMIC.CTRL |= PMIC_LOLVLEX_bm;



}
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	ef 90       	pop	r14
     4dc:	08 95       	ret

000004de <Init_LIS3DH>:


}
*/
void Init_LIS3DH(void)
{
     4de:	ef 92       	push	r14
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
  //ODR3 ODR2 ODR1 ODR0 LPen Zen Yen Xen
  //  0    1    0    1   0   1   1   1
  //ODR=100Hz
 	 write_register=0x57;
//  write_register=DR
	SPI_MasterSSLow(ssPort, PIN0_bm);
     4e6:	e0 91 29 20 	lds	r30, 0x2029
     4ea:	f0 91 2a 20 	lds	r31, 0x202A
     4ee:	ee 24       	eor	r14, r14
     4f0:	e3 94       	inc	r14
     4f2:	e6 82       	std	Z+6, r14	; 0x06
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4f4:	25 e3       	ldi	r18, 0x35	; 53
     4f6:	f2 2e       	mov	r15, r18
     4f8:	8f 2d       	mov	r24, r15
     4fa:	8a 95       	dec	r24
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <Init_LIS3DH+0x1c>
	_delay_us(10);
	SPI_MasterTransceiveByte(&spiMasterD, 0x20);
     4fe:	04 e5       	ldi	r16, 0x54	; 84
     500:	13 e2       	ldi	r17, 0x23	; 35
     502:	c8 01       	movw	r24, r16
     504:	60 e2       	ldi	r22, 0x20	; 32
     506:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, write_register);
     50a:	c8 01       	movw	r24, r16
     50c:	67 e5       	ldi	r22, 0x57	; 87
     50e:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_MasterTransceiveByte>
     512:	8f 2d       	mov	r24, r15
     514:	8a 95       	dec	r24
     516:	f1 f7       	brne	.-4      	; 0x514 <Init_LIS3DH+0x36>
	_delay_us(10);
	SPI_MasterSSHigh(ssPort, PIN0_bm);
     518:	e0 91 29 20 	lds	r30, 0x2029
     51c:	f0 91 2a 20 	lds	r31, 0x202A
     520:	e5 82       	std	Z+5, r14	; 0x05
     522:	8f 2d       	mov	r24, r15
     524:	8a 95       	dec	r24
     526:	f1 f7       	brne	.-4      	; 0x524 <Init_LIS3DH+0x46>
	_delay_us(10);
  //CTRL_REG2
  //HPM1 HPM0 HPCF2 HPCF1 FDS HPCLICK HPIS2 HPIS1
  // 0    0     0     0    0     0       0    0
  write_register=0x00;
	SPI_MasterSSLow(ssPort, PIN0_bm);
     528:	e6 82       	std	Z+6, r14	; 0x06
     52a:	8f 2d       	mov	r24, r15
     52c:	8a 95       	dec	r24
     52e:	f1 f7       	brne	.-4      	; 0x52c <Init_LIS3DH+0x4e>
	_delay_us(10);
	SPI_MasterTransceiveByte(&spiMasterD, 0x21);
     530:	c8 01       	movw	r24, r16
     532:	61 e2       	ldi	r22, 0x21	; 33
     534:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, write_register);
     538:	c8 01       	movw	r24, r16
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_MasterTransceiveByte>
     540:	8f 2d       	mov	r24, r15
     542:	8a 95       	dec	r24
     544:	f1 f7       	brne	.-4      	; 0x542 <Init_LIS3DH+0x64>
	_delay_us(10);
	SPI_MasterSSHigh(ssPort, PIN0_bm);
     546:	e0 91 29 20 	lds	r30, 0x2029
     54a:	f0 91 2a 20 	lds	r31, 0x202A
     54e:	e5 82       	std	Z+5, r14	; 0x05
     550:	8f 2d       	mov	r24, r15
     552:	8a 95       	dec	r24
     554:	f1 f7       	brne	.-4      	; 0x552 <Init_LIS3DH+0x74>
	_delay_us(10);
  //CTRL_REG3
  //I1_CLICK I1_AOI1 I1_AOI2 I1_DRDY1 I1_DRDY2 I1_WTM I1_OVERRUN   --
  //	0       0        0       0       0        0       1         0
  write_register=0x00;
	SPI_MasterSSLow(ssPort, PIN0_bm);
     556:	e6 82       	std	Z+6, r14	; 0x06
     558:	8f 2d       	mov	r24, r15
     55a:	8a 95       	dec	r24
     55c:	f1 f7       	brne	.-4      	; 0x55a <Init_LIS3DH+0x7c>
	_delay_us(10);
	SPI_MasterTransceiveByte(&spiMasterD, 0x22);
     55e:	c8 01       	movw	r24, r16
     560:	62 e2       	ldi	r22, 0x22	; 34
     562:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, write_register);
     566:	c8 01       	movw	r24, r16
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_MasterTransceiveByte>
     56e:	8f 2d       	mov	r24, r15
     570:	8a 95       	dec	r24
     572:	f1 f7       	brne	.-4      	; 0x570 <Init_LIS3DH+0x92>
	_delay_us(10);
	SPI_MasterSSHigh(ssPort, PIN0_bm);
     574:	e0 91 29 20 	lds	r30, 0x2029
     578:	f0 91 2a 20 	lds	r31, 0x202A
     57c:	e5 82       	std	Z+5, r14	; 0x05
     57e:	8f 2d       	mov	r24, r15
     580:	8a 95       	dec	r24
     582:	f1 f7       	brne	.-4      	; 0x580 <Init_LIS3DH+0xa2>
	_delay_us(10);
  //CTRL_REG4
  //BDU BLE FS1 FS0   HR  ST1 ST0 SIM
  //1    0   0   0    1    0   0   0
  write_register=0x88;
	SPI_MasterSSLow(ssPort, PIN0_bm);
     584:	e6 82       	std	Z+6, r14	; 0x06
     586:	8f 2d       	mov	r24, r15
     588:	8a 95       	dec	r24
     58a:	f1 f7       	brne	.-4      	; 0x588 <Init_LIS3DH+0xaa>
	_delay_us(10);
	SPI_MasterTransceiveByte(&spiMasterD, 0x23);
     58c:	c8 01       	movw	r24, r16
     58e:	63 e2       	ldi	r22, 0x23	; 35
     590:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, write_register);
     594:	c8 01       	movw	r24, r16
     596:	68 e8       	ldi	r22, 0x88	; 136
     598:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_MasterTransceiveByte>
     59c:	8f 2d       	mov	r24, r15
     59e:	8a 95       	dec	r24
     5a0:	f1 f7       	brne	.-4      	; 0x59e <Init_LIS3DH+0xc0>
	_delay_us(10);
	SPI_MasterSSHigh(ssPort, PIN0_bm);
     5a2:	e0 91 29 20 	lds	r30, 0x2029
     5a6:	f0 91 2a 20 	lds	r31, 0x202A
     5aa:	e5 82       	std	Z+5, r14	; 0x05
     5ac:	8f 2d       	mov	r24, r15
     5ae:	8a 95       	dec	r24
     5b0:	f1 f7       	brne	.-4      	; 0x5ae <Init_LIS3DH+0xd0>
	_delay_us(10);
  //CTRL_REG5
  //BOOT FIFO_EN -- -- LIR_INT1 D4D_INT1 0 0
  //0       0     0  0    0       0      0 0 
  write_register=0x00;
	SPI_MasterSSLow(ssPort, PIN0_bm);
     5b2:	e6 82       	std	Z+6, r14	; 0x06
     5b4:	8f 2d       	mov	r24, r15
     5b6:	8a 95       	dec	r24
     5b8:	f1 f7       	brne	.-4      	; 0x5b6 <Init_LIS3DH+0xd8>
	_delay_us(10);
	SPI_MasterTransceiveByte(&spiMasterD, 0x24);
     5ba:	c8 01       	movw	r24, r16
     5bc:	64 e2       	ldi	r22, 0x24	; 36
     5be:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, write_register);
     5c2:	c8 01       	movw	r24, r16
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_MasterTransceiveByte>
     5ca:	8f 2d       	mov	r24, r15
     5cc:	8a 95       	dec	r24
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <Init_LIS3DH+0xee>
	_delay_us(10);
	SPI_MasterSSHigh(ssPort, PIN0_bm);
     5d0:	e0 91 29 20 	lds	r30, 0x2029
     5d4:	f0 91 2a 20 	lds	r31, 0x202A
     5d8:	e5 82       	std	Z+5, r14	; 0x05
	//CTRL_REG6
  //I2_CLICKen I2_INT1 0 BOOT_I1 0 - - H_LACTIVE -
  //	0        0     0    0    0  0      0     0 
  write_register=0x00;
	SPI_MasterSSLow(ssPort, PIN0_bm);
     5da:	e6 82       	std	Z+6, r14	; 0x06
     5dc:	8f 2d       	mov	r24, r15
     5de:	8a 95       	dec	r24
     5e0:	f1 f7       	brne	.-4      	; 0x5de <Init_LIS3DH+0x100>
	_delay_us(10);
	SPI_MasterTransceiveByte(&spiMasterD, 0x25);
     5e2:	c8 01       	movw	r24, r16
     5e4:	65 e2       	ldi	r22, 0x25	; 37
     5e6:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, write_register);
     5ea:	c8 01       	movw	r24, r16
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_MasterTransceiveByte>
     5f2:	8f 2d       	mov	r24, r15
     5f4:	8a 95       	dec	r24
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <Init_LIS3DH+0x116>
	_delay_us(10);
	SPI_MasterSSHigh(ssPort, PIN0_bm);
     5f8:	e0 91 29 20 	lds	r30, 0x2029
     5fc:	f0 91 2a 20 	lds	r31, 0x202A
     600:	e5 82       	std	Z+5, r14	; 0x05

 write_register=0xC0;
	SPI_MasterSSLow(ssPort, PIN0_bm);
     602:	e6 82       	std	Z+6, r14	; 0x06
     604:	8f 2d       	mov	r24, r15
     606:	8a 95       	dec	r24
     608:	f1 f7       	brne	.-4      	; 0x606 <Init_LIS3DH+0x128>
	_delay_us(10);
	SPI_MasterTransceiveByte(&spiMasterD, 0x1F);
     60a:	c8 01       	movw	r24, r16
     60c:	6f e1       	ldi	r22, 0x1F	; 31
     60e:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, write_register);
     612:	c8 01       	movw	r24, r16
     614:	60 ec       	ldi	r22, 0xC0	; 192
     616:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_MasterTransceiveByte>
     61a:	fa 94       	dec	r15
     61c:	f1 f7       	brne	.-4      	; 0x61a <Init_LIS3DH+0x13c>
	_delay_us(10);
	SPI_MasterSSHigh(ssPort, PIN0_bm);
     61e:	e0 91 29 20 	lds	r30, 0x2029
     622:	f0 91 2a 20 	lds	r31, 0x202A
     626:	e5 82       	std	Z+5, r14	; 0x05


}
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	08 95       	ret

00000632 <main>:
	}		
}


int main(void)
{
     632:	2f 92       	push	r2
     634:	3f 92       	push	r3
     636:	4f 92       	push	r4
     638:	5f 92       	push	r5
     63a:	6f 92       	push	r6
     63c:	7f 92       	push	r7
     63e:	8f 92       	push	r8
     640:	9f 92       	push	r9
     642:	af 92       	push	r10
     644:	bf 92       	push	r11
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	df 93       	push	r29
     654:	cf 93       	push	r28
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	6c 97       	sbiw	r28, 0x1c	; 28
     65c:	cd bf       	out	0x3d, r28	; 61
     65e:	de bf       	out	0x3e, r29	; 62
    double m_XGY_sum=0;
    double m_YGY_sum=0;
    double m_ZGY_sum=0;


	clk_init();
     660:	0e 94 88 01 	call	0x310	; 0x310 <clk_init>
	port_init();
     664:	0e 94 ca 01 	call	0x394	; 0x394 <port_init>
 	USART_INIT();
     668:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <USART_INIT>
	
	timer_Init();
     66c:	0e 94 ad 01 	call	0x35a	; 0x35a <timer_Init>
	
}
void int_init(void){
	
	
	PMIC.INTPRI=0x00;
     670:	f0 ea       	ldi	r31, 0xA0	; 160
     672:	8f 2e       	mov	r8, r31
     674:	91 2c       	mov	r9, r1
     676:	d4 01       	movw	r26, r8
     678:	11 96       	adiw	r26, 0x01	; 1
     67a:	1c 92       	st	X, r1
     67c:	11 97       	sbiw	r26, 0x01	; 1
	PMIC.CTRL=0x07;//High level interrupt enable	
     67e:	87 e0       	ldi	r24, 0x07	; 7
     680:	12 96       	adiw	r26, 0x02	; 2
     682:	8c 93       	st	X, r24
//	spi_init();


	/* Init SS pin as output with wired AND and pull-up. */
	//120813 portC를 D로 바꿈 SPI인거 같아서  
	PORTD.DIRSET = PIN0_bm;
     684:	e0 e6       	ldi	r30, 0x60	; 96
     686:	f6 e0       	ldi	r31, 0x06	; 6
     688:	21 e0       	ldi	r18, 0x01	; 1
     68a:	21 83       	std	Z+1, r18	; 0x01
	PORTD.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc;
     68c:	88 e3       	ldi	r24, 0x38	; 56
     68e:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.DIRSET = PIN1_bm;
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	91 83       	std	Z+1, r25	; 0x01
	PORTD.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc;
     694:	81 8b       	std	Z+17, r24	; 0x11

	/* Set SS output to high. (No slave addressed). */
	PORTD.OUTSET = PIN0_bm;
     696:	25 83       	std	Z+5, r18	; 0x05
	PORTD.OUTSET = PIN1_bm;
     698:	95 83       	std	Z+5, r25	; 0x05

	/* Instantiate pointer to ssPort. */
	PORT_t *ssPort = &PORTD;

	/* Initialize SPI master on port D. */
	SPI_MasterInit(&spiMasterD,
     69a:	84 e5       	ldi	r24, 0x54	; 84
     69c:	93 e2       	ldi	r25, 0x23	; 35
     69e:	60 ec       	ldi	r22, 0xC0	; 192
     6a0:	79 e0       	ldi	r23, 0x09	; 9
     6a2:	40 e6       	ldi	r20, 0x60	; 96
     6a4:	56 e0       	ldi	r21, 0x06	; 6
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	0c e0       	ldi	r16, 0x0C	; 12
     6aa:	ee 24       	eor	r14, r14
     6ac:	cc 24       	eor	r12, r12
     6ae:	aa 24       	eor	r10, r10
     6b0:	a3 94       	inc	r10
     6b2:	0e 94 d7 06 	call	0xdae	; 0xdae <SPI_MasterInit>
	               false,
	               SPI_PRESCALER_DIV16_gc);


	/* Use USARTD0 and initialize buffers. */
	USART_InterruptDriver_Initialize(&USARTD0_data, &USARTD0, USART_DREINTLVL_HI_gc);
     6b6:	83 ec       	ldi	r24, 0xC3	; 195
     6b8:	93 e2       	ldi	r25, 0x23	; 35
     6ba:	60 ea       	ldi	r22, 0xA0	; 160
     6bc:	79 e0       	ldi	r23, 0x09	; 9
     6be:	43 e0       	ldi	r20, 0x03	; 3
     6c0:	0e 94 70 07 	call	0xee0	; 0xee0 <USART_InterruptDriver_Initialize>

	/* Enable RXC interrupt. */
	USART_RxdInterruptLevel_Set(USARTD0_data.usart, USART_RXCINTLVL_HI_gc);
     6c4:	e0 91 c3 23 	lds	r30, 0x23C3
     6c8:	f0 91 c4 23 	lds	r31, 0x23C4
     6cc:	83 81       	ldd	r24, Z+3	; 0x03
     6ce:	80 63       	ori	r24, 0x30	; 48
     6d0:	83 83       	std	Z+3, r24	; 0x03

	/* Enable PMIC interrupt level low. */
	PMIC.CTRL |= PMIC_HILVLEX_bm;
     6d2:	80 91 a2 00 	lds	r24, 0x00A2
     6d6:	84 60       	ori	r24, 0x04	; 4
     6d8:	f4 01       	movw	r30, r8
     6da:	82 83       	std	Z+2, r24	; 0x02

	/* Enable global interrupts.*/
	sei();
     6dc:	78 94       	sei

	/* Initialize ACC & Gyro */
//	Init_L3G4200DH();
	Init_LIS3DH();
     6de:	0e 94 6f 02 	call	0x4de	; 0x4de <Init_LIS3DH>
	
	SPI_MasterCreateDataPacket(&dataPacket,
     6e2:	87 e0       	ldi	r24, 0x07	; 7
     6e4:	98 e2       	ldi	r25, 0x28	; 40
     6e6:	62 e2       	ldi	r22, 0x22	; 34
     6e8:	70 e2       	ldi	r23, 0x20	; 32
     6ea:	46 e8       	ldi	r20, 0x86	; 134
     6ec:	50 e2       	ldi	r21, 0x20	; 32
     6ee:	27 e0       	ldi	r18, 0x07	; 7
     6f0:	00 e6       	ldi	r16, 0x60	; 96
     6f2:	16 e0       	ldi	r17, 0x06	; 6
     6f4:	e2 e0       	ldi	r30, 0x02	; 2
     6f6:	ee 2e       	mov	r14, r30
     6f8:	0e 94 0e 07 	call	0xe1c	; 0xe1c <SPI_MasterCreateDataPacket>
		                           GYRO_DATA,
		                           NUM_BYTES,
		                           &PORTD,
		                           PIN1_bm);

		SPI_MasterSSLow(ssPort, PIN1_bm);
     6fc:	52 e0       	ldi	r21, 0x02	; 2
     6fe:	f5 2e       	mov	r15, r21
     700:	d8 01       	movw	r26, r16
     702:	16 96       	adiw	r26, 0x06	; 6
     704:	fc 92       	st	X, r15

		/* Transceive packet. */
		SPI_MasterTransceivePacket(&spiMasterD, &dataPacket);
     706:	84 e5       	ldi	r24, 0x54	; 84
     708:	93 e2       	ldi	r25, 0x23	; 35
     70a:	67 e0       	ldi	r22, 0x07	; 7
     70c:	78 e2       	ldi	r23, 0x28	; 40
     70e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <SPI_MasterTransceivePacket>
		/* MASTER: Release SS to slave. */

		SPI_MasterSSHigh(ssPort, PIN1_bm);
     712:	f8 01       	movw	r30, r16
     714:	f5 82       	std	Z+5, r15	; 0x05
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0

	double enc_time_cnt=0;

	for(i=0;i<DELAY_COMP_G;i++)
	{
		m_XGY_buf[i]=0.0;
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	fc 01       	movw	r30, r24
     724:	e9 5b       	subi	r30, 0xB9	; 185
     726:	fd 4d       	sbci	r31, 0xDD	; 221
     728:	20 83       	st	Z, r18
     72a:	31 83       	std	Z+1, r19	; 0x01
     72c:	42 83       	std	Z+2, r20	; 0x02
     72e:	53 83       	std	Z+3, r21	; 0x03
		m_YGY_buf[i]=0.0;
     730:	fc 01       	movw	r30, r24
     732:	ec 5b       	subi	r30, 0xBC	; 188
     734:	fe 4d       	sbci	r31, 0xDE	; 222
     736:	20 83       	st	Z, r18
     738:	31 83       	std	Z+1, r19	; 0x01
     73a:	42 83       	std	Z+2, r20	; 0x02
     73c:	53 83       	std	Z+3, r21	; 0x03
		m_ZGY_buf[i]=0.0;
     73e:	fc 01       	movw	r30, r24
     740:	eb 55       	subi	r30, 0x5B	; 91
     742:	fd 4d       	sbci	r31, 0xDD	; 221
     744:	20 83       	st	Z, r18
     746:	31 83       	std	Z+1, r19	; 0x01
     748:	42 83       	std	Z+2, r20	; 0x02
     74a:	53 83       	std	Z+3, r21	; 0x03

		m_XXL_buf[i]=0.0;
     74c:	fc 01       	movw	r30, r24
     74e:	ec 5c       	subi	r30, 0xCC	; 204
     750:	f6 4d       	sbci	r31, 0xD6	; 214
     752:	20 83       	st	Z, r18
     754:	31 83       	std	Z+1, r19	; 0x01
     756:	42 83       	std	Z+2, r20	; 0x02
     758:	53 83       	std	Z+3, r21	; 0x03
		m_YXL_buf[i]=0.0;
     75a:	fc 01       	movw	r30, r24
     75c:	e4 50       	subi	r30, 0x04	; 4
     75e:	fd 4d       	sbci	r31, 0xDD	; 221
     760:	20 83       	st	Z, r18
     762:	31 83       	std	Z+1, r19	; 0x01
     764:	42 83       	std	Z+2, r20	; 0x02
     766:	53 83       	std	Z+3, r21	; 0x03
		m_ZXL_buf[i]=0.0;
     768:	fc 01       	movw	r30, r24
     76a:	ec 50       	subi	r30, 0x0C	; 12
     76c:	ff 4d       	sbci	r31, 0xDF	; 223
     76e:	20 83       	st	Z, r18
     770:	31 83       	std	Z+1, r19	; 0x01
     772:	42 83       	std	Z+2, r20	; 0x02
     774:	53 83       	std	Z+3, r21	; 0x03

		m_enc_buf[i]=0.0;
     776:	fc 01       	movw	r30, r24
     778:	ea 5c       	subi	r30, 0xCA	; 202
     77a:	ff 4d       	sbci	r31, 0xDF	; 223
     77c:	20 83       	st	Z, r18
     77e:	31 83       	std	Z+1, r19	; 0x01
     780:	42 83       	std	Z+2, r20	; 0x02
     782:	53 83       	std	Z+3, r21	; 0x03
		m_enc_timebuf[i]=0.0;
     784:	fc 01       	movw	r30, r24
     786:	e4 56       	subi	r30, 0x64	; 100
     788:	ff 4d       	sbci	r31, 0xDF	; 223
     78a:	20 83       	st	Z, r18
     78c:	31 83       	std	Z+1, r19	; 0x01
     78e:	42 83       	std	Z+2, r20	; 0x02
     790:	53 83       	std	Z+3, r21	; 0x03
		m_T_buf[i]=0.0;
     792:	fc 01       	movw	r30, r24
     794:	ed 50       	subi	r30, 0x0D	; 13
     796:	fe 4d       	sbci	r31, 0xDE	; 222
     798:	20 83       	st	Z, r18
     79a:	31 83       	std	Z+1, r19	; 0x01
     79c:	42 83       	std	Z+2, r20	; 0x02
     79e:	53 83       	std	Z+3, r21	; 0x03
     7a0:	04 96       	adiw	r24, 0x04	; 4
			 		  {0,0,0,0.1}};


	double enc_time_cnt=0;

	for(i=0;i<DELAY_COMP_G;i++)
     7a2:	80 35       	cpi	r24, 0x50	; 80
     7a4:	91 05       	cpc	r25, r1
     7a6:	09 f0       	breq	.+2      	; 0x7aa <main+0x178>
     7a8:	bc cf       	rjmp	.-136    	; 0x722 <main+0xf0>
     7aa:	1b 8e       	std	Y+27, r1	; 0x1b
     7ac:	1c 8e       	std	Y+28, r1	; 0x1c
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	2d 83       	std	Y+5, r18	; 0x05
     7b8:	3e 83       	std	Y+6, r19	; 0x06
     7ba:	4f 83       	std	Y+7, r20	; 0x07
     7bc:	58 87       	std	Y+8, r21	; 0x08
     7be:	29 83       	std	Y+1, r18	; 0x01
     7c0:	3a 83       	std	Y+2, r19	; 0x02
     7c2:	4b 83       	std	Y+3, r20	; 0x03
     7c4:	5c 83       	std	Y+4, r21	; 0x04
     7c6:	19 01       	movw	r2, r18
     7c8:	2a 01       	movw	r4, r20
     7ca:	39 01       	movw	r6, r18
     7cc:	4a 01       	movw	r8, r20
     7ce:	aa 24       	eor	r10, r10
     7d0:	bb 24       	eor	r11, r11
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <main+0x1a6>
     7d4:	a9 84       	ldd	r10, Y+9	; 0x09
     7d6:	ba 84       	ldd	r11, Y+10	; 0x0a
	while(1) 
	{
		
		
		//if(1)
		if(samplingFlag)
     7d8:	80 91 2c 20 	lds	r24, 0x202C
     7dc:	90 91 2d 20 	lds	r25, 0x202D
     7e0:	89 2b       	or	r24, r25
     7e2:	d1 f3       	breq	.-12     	; 0x7d8 <main+0x1a6>
		{
				
		
			
//				adc_start_conversion(&ADCA, ADC_CH0);			
				samplingFlag=0;
     7e4:	10 92 2c 20 	sts	0x202C, r1
     7e8:	10 92 2d 20 	sts	0x202D, r1
				timer=TCC0.CNT;
     7ec:	40 91 20 08 	lds	r20, 0x0820
     7f0:	50 91 21 08 	lds	r21, 0x0821
     7f4:	49 87       	std	Y+9, r20	; 0x09
     7f6:	5a 87       	std	Y+10, r21	; 0x0a
				diff_counter=timer-timer_old;
				
				
				/* Create data packet (SS to slave by PC0). */
				SPI_MasterCreateDataPacket(&dataPacket,
     7f8:	87 e0       	ldi	r24, 0x07	; 7
     7fa:	98 e2       	ldi	r25, 0x28	; 40
     7fc:	64 e1       	ldi	r22, 0x14	; 20
     7fe:	70 e2       	ldi	r23, 0x20	; 32
     800:	4d e8       	ldi	r20, 0x8D	; 141
     802:	50 e2       	ldi	r21, 0x20	; 32
     804:	27 e0       	ldi	r18, 0x07	; 7
     806:	00 e6       	ldi	r16, 0x60	; 96
     808:	16 e0       	ldi	r17, 0x06	; 6
     80a:	ee 24       	eor	r14, r14
     80c:	e3 94       	inc	r14
     80e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <SPI_MasterCreateDataPacket>
				                           PIN0_bm);


				/* MASTER: Pull SS line low. This has to be done since
				 *         SPI_MasterTransceiveByte() does not control the SS line(s). */
				SPI_MasterSSLow(ssPort, PIN0_bm);
     812:	40 e6       	ldi	r20, 0x60	; 96
     814:	c4 2e       	mov	r12, r20
     816:	46 e0       	ldi	r20, 0x06	; 6
     818:	d4 2e       	mov	r13, r20
     81a:	11 e0       	ldi	r17, 0x01	; 1
     81c:	d6 01       	movw	r26, r12
     81e:	16 96       	adiw	r26, 0x06	; 6
     820:	1c 93       	st	X, r17
     822:	8a e1       	ldi	r24, 0x1A	; 26
     824:	8a 95       	dec	r24
     826:	f1 f7       	brne	.-4      	; 0x824 <main+0x1f2>
				_delay_us(5);
				/* Transceive packet. */
				SPI_MasterTransceivePacket(&spiMasterD, &dataPacket);
     828:	84 e5       	ldi	r24, 0x54	; 84
     82a:	93 e2       	ldi	r25, 0x23	; 35
     82c:	67 e0       	ldi	r22, 0x07	; 7
     82e:	78 e2       	ldi	r23, 0x28	; 40
     830:	0e 94 2d 07 	call	0xe5a	; 0xe5a <SPI_MasterTransceivePacket>
     834:	8a e1       	ldi	r24, 0x1A	; 26
     836:	8a 95       	dec	r24
     838:	f1 f7       	brne	.-4      	; 0x836 <main+0x204>
				/* MASTER: Release SS to slave. */
				_delay_us(5);
				SPI_MasterSSHigh(ssPort, PIN0_bm);
     83a:	f6 01       	movw	r30, r12
     83c:	15 83       	std	Z+5, r17	; 0x05
				
				
				/* Create data packet (SS to slave by PC1). */
				SPI_MasterCreateDataPacket(&dataPacket,
     83e:	87 e0       	ldi	r24, 0x07	; 7
     840:	98 e2       	ldi	r25, 0x28	; 40
     842:	6b e1       	ldi	r22, 0x1B	; 27
     844:	70 e2       	ldi	r23, 0x20	; 32
     846:	46 e8       	ldi	r20, 0x86	; 134
     848:	50 e2       	ldi	r21, 0x20	; 32
     84a:	27 e0       	ldi	r18, 0x07	; 7
     84c:	00 e6       	ldi	r16, 0x60	; 96
     84e:	16 e0       	ldi	r17, 0x06	; 6
     850:	32 e0       	ldi	r19, 0x02	; 2
     852:	e3 2e       	mov	r14, r19
     854:	0e 94 0e 07 	call	0xe1c	; 0xe1c <SPI_MasterCreateDataPacket>
				                           &PORTD,
				                           PIN1_bm);

				/* MASTER: Pull SS line low. This has to be done since
				 *         SPI_MasterTransceiveByte() does not control the SS line(s). */
				SPI_MasterSSLow(ssPort, PIN1_bm);
     858:	12 e0       	ldi	r17, 0x02	; 2
     85a:	d6 01       	movw	r26, r12
     85c:	16 96       	adiw	r26, 0x06	; 6
     85e:	1c 93       	st	X, r17
     860:	8a e1       	ldi	r24, 0x1A	; 26
     862:	8a 95       	dec	r24
     864:	f1 f7       	brne	.-4      	; 0x862 <main+0x230>
				/* Transceive packet. */
				_delay_us(5);
				SPI_MasterTransceivePacket(&spiMasterD, &dataPacket);
     866:	84 e5       	ldi	r24, 0x54	; 84
     868:	93 e2       	ldi	r25, 0x23	; 35
     86a:	67 e0       	ldi	r22, 0x07	; 7
     86c:	78 e2       	ldi	r23, 0x28	; 40
     86e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <SPI_MasterTransceivePacket>
     872:	8a e1       	ldi	r24, 0x1A	; 26
     874:	8a 95       	dec	r24
     876:	f1 f7       	brne	.-4      	; 0x874 <main+0x242>
				/* MASTER: Release SS to slave. */
				_delay_us(5);
				SPI_MasterSSHigh(ssPort, PIN1_bm);
     878:	f6 01       	movw	r30, r12
     87a:	15 83       	std	Z+5, r17	; 0x05



				timer_old=timer;

				T=(double)diff_counter/2000000.0*32.0;
     87c:	69 85       	ldd	r22, Y+9	; 0x09
     87e:	7a 85       	ldd	r23, Y+10	; 0x0a
     880:	6a 19       	sub	r22, r10
     882:	7b 09       	sbc	r23, r11
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatunsisf>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	34 e2       	ldi	r19, 0x24	; 36
     890:	44 ef       	ldi	r20, 0xF4	; 244
     892:	59 e4       	ldi	r21, 0x49	; 73
     894:	0e 94 00 08 	call	0x1000	; 0x1000 <__divsf3>
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	40 e0       	ldi	r20, 0x00	; 0
     89e:	52 e4       	ldi	r21, 0x42	; 66
     8a0:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__mulsf3>
     8a4:	60 93 97 22 	sts	0x2297, r22
     8a8:	70 93 98 22 	sts	0x2298, r23
     8ac:	80 93 99 22 	sts	0x2299, r24
     8b0:	90 93 9a 22 	sts	0x229A, r25

				ACC_DATA[2]=ACC_DATA[2]+0x80;
     8b4:	80 91 8f 20 	lds	r24, 0x208F
     8b8:	80 58       	subi	r24, 0x80	; 128
     8ba:	80 93 8f 20 	sts	0x208F, r24
				ACC_DATA[4]=ACC_DATA[4]+0x80;
     8be:	90 91 91 20 	lds	r25, 0x2091
     8c2:	90 58       	subi	r25, 0x80	; 128
     8c4:	90 93 91 20 	sts	0x2091, r25
				ACC_DATA[6]=ACC_DATA[6]+0x80;
     8c8:	20 91 93 20 	lds	r18, 0x2093
     8cc:	20 58       	subi	r18, 0x80	; 128
     8ce:	20 93 93 20 	sts	0x2093, r18
				YXL= (unsigned int)ACC_DATA[2]*256+ACC_DATA[1];
     8d2:	88 8b       	std	Y+16, r24	; 0x10
     8d4:	1f 86       	std	Y+15, r1	; 0x0f
     8d6:	80 91 8e 20 	lds	r24, 0x208E
     8da:	cf 84       	ldd	r12, Y+15	; 0x0f
     8dc:	d8 88       	ldd	r13, Y+16	; 0x10
     8de:	c8 0e       	add	r12, r24
     8e0:	d1 1c       	adc	r13, r1
				XXL= (unsigned int)ACC_DATA[4]*256+ACC_DATA[3];
     8e2:	9a 8b       	std	Y+18, r25	; 0x12
     8e4:	19 8a       	std	Y+17, r1	; 0x11
     8e6:	80 91 90 20 	lds	r24, 0x2090
     8ea:	09 89       	ldd	r16, Y+17	; 0x11
     8ec:	1a 89       	ldd	r17, Y+18	; 0x12
     8ee:	08 0f       	add	r16, r24
     8f0:	11 1d       	adc	r17, r1
				ZXL= (unsigned int)ACC_DATA[6]*256+ACC_DATA[5];
     8f2:	2c 8b       	std	Y+20, r18	; 0x14
     8f4:	1b 8a       	std	Y+19, r1	; 0x13
     8f6:	80 91 92 20 	lds	r24, 0x2092
     8fa:	ab 88       	ldd	r10, Y+19	; 0x13
     8fc:	bc 88       	ldd	r11, Y+20	; 0x14
     8fe:	a8 0e       	add	r10, r24
     900:	b1 1c       	adc	r11, r1

				GYRO_DATA[2]=GYRO_DATA[2]+0x80;
     902:	20 91 88 20 	lds	r18, 0x2088
     906:	20 58       	subi	r18, 0x80	; 128
     908:	20 93 88 20 	sts	0x2088, r18
				GYRO_DATA[4]=GYRO_DATA[4]+0x80;
     90c:	80 91 8a 20 	lds	r24, 0x208A
     910:	80 58       	subi	r24, 0x80	; 128
     912:	80 93 8a 20 	sts	0x208A, r24
				GYRO_DATA[6]=GYRO_DATA[6]+0x80;
     916:	90 91 8c 20 	lds	r25, 0x208C
     91a:	90 58       	subi	r25, 0x80	; 128
     91c:	90 93 8c 20 	sts	0x208C, r25
				XGY= (unsigned int)GYRO_DATA[4]*256+GYRO_DATA[3];
     920:	8e 8b       	std	Y+22, r24	; 0x16
     922:	1d 8a       	std	Y+21, r1	; 0x15
     924:	80 91 89 20 	lds	r24, 0x2089
     928:	4d 89       	ldd	r20, Y+21	; 0x15
     92a:	5e 89       	ldd	r21, Y+22	; 0x16
     92c:	48 0f       	add	r20, r24
     92e:	51 1d       	adc	r21, r1
     930:	4d 87       	std	Y+13, r20	; 0x0d
     932:	5e 87       	std	Y+14, r21	; 0x0e
				YGY= (unsigned int)GYRO_DATA[2]*256+GYRO_DATA[1];
     934:	28 8f       	std	Y+24, r18	; 0x18
     936:	1f 8a       	std	Y+23, r1	; 0x17
     938:	80 91 87 20 	lds	r24, 0x2087
     93c:	af 89       	ldd	r26, Y+23	; 0x17
     93e:	b8 8d       	ldd	r27, Y+24	; 0x18
     940:	a8 0f       	add	r26, r24
     942:	b1 1d       	adc	r27, r1
     944:	ab 87       	std	Y+11, r26	; 0x0b
     946:	bc 87       	std	Y+12, r27	; 0x0c
				ZGY= (unsigned int)GYRO_DATA[6]*256+GYRO_DATA[5];	
     948:	9a 8f       	std	Y+26, r25	; 0x1a
     94a:	19 8e       	std	Y+25, r1	; 0x19
     94c:	80 91 8b 20 	lds	r24, 0x208B
     950:	e9 8c       	ldd	r14, Y+25	; 0x19
     952:	fa 8c       	ldd	r15, Y+26	; 0x1a
     954:	e8 0e       	add	r14, r24
     956:	f1 1c       	adc	r15, r1
			
			if(m_IMU_count<Tsample)
     958:	eb 8d       	ldd	r30, Y+27	; 0x1b
     95a:	fc 8d       	ldd	r31, Y+28	; 0x1c
     95c:	e4 36       	cpi	r30, 0x64	; 100
     95e:	f1 05       	cpc	r31, r1
     960:	20 f4       	brcc	.+8      	; 0x96a <main+0x338>
			{
				m_IMU_count++;
     962:	31 96       	adiw	r30, 0x01	; 1
     964:	eb 8f       	std	Y+27, r30	; 0x1b
     966:	fc 8f       	std	Y+28, r31	; 0x1c
     968:	35 cf       	rjmp	.-406    	; 0x7d4 <main+0x1a2>
			}
			else if(m_IMU_count<Tsample+Bsample)
     96a:	2b 8d       	ldd	r18, Y+27	; 0x1b
     96c:	3c 8d       	ldd	r19, Y+28	; 0x1c
     96e:	2c 54       	subi	r18, 0x4C	; 76
     970:	34 40       	sbci	r19, 0x04	; 4
     972:	08 f0       	brcs	.+2      	; 0x976 <main+0x344>
     974:	42 c0       	rjmp	.+132    	; 0x9fa <main+0x3c8>
			{
				m_XXL_sum+=XXL;
     976:	b8 01       	movw	r22, r16
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatunsisf>
     980:	9b 01       	movw	r18, r22
     982:	ac 01       	movw	r20, r24
     984:	6d 81       	ldd	r22, Y+5	; 0x05
     986:	7e 81       	ldd	r23, Y+6	; 0x06
     988:	8f 81       	ldd	r24, Y+7	; 0x07
     98a:	98 85       	ldd	r25, Y+8	; 0x08
     98c:	0e 94 9c 07 	call	0xf38	; 0xf38 <__addsf3>
     990:	6d 83       	std	Y+5, r22	; 0x05
     992:	7e 83       	std	Y+6, r23	; 0x06
     994:	8f 83       	std	Y+7, r24	; 0x07
     996:	98 87       	std	Y+8, r25	; 0x08
				m_YXL_sum+=YXL;
     998:	b6 01       	movw	r22, r12
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatunsisf>
     9a2:	9b 01       	movw	r18, r22
     9a4:	ac 01       	movw	r20, r24
     9a6:	69 81       	ldd	r22, Y+1	; 0x01
     9a8:	7a 81       	ldd	r23, Y+2	; 0x02
     9aa:	8b 81       	ldd	r24, Y+3	; 0x03
     9ac:	9c 81       	ldd	r25, Y+4	; 0x04
     9ae:	0e 94 9c 07 	call	0xf38	; 0xf38 <__addsf3>
     9b2:	69 83       	std	Y+1, r22	; 0x01
     9b4:	7a 83       	std	Y+2, r23	; 0x02
     9b6:	8b 83       	std	Y+3, r24	; 0x03
     9b8:	9c 83       	std	Y+4, r25	; 0x04
				m_ZXL_sum+=ZXL;
     9ba:	b5 01       	movw	r22, r10
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatunsisf>
     9c4:	9b 01       	movw	r18, r22
     9c6:	ac 01       	movw	r20, r24
     9c8:	c2 01       	movw	r24, r4
     9ca:	b1 01       	movw	r22, r2
     9cc:	0e 94 9c 07 	call	0xf38	; 0xf38 <__addsf3>
     9d0:	1b 01       	movw	r2, r22
     9d2:	2c 01       	movw	r4, r24
				//m_XGY_sum+=XGY;
				//m_YGY_sum+=YGY;
				m_ZGY_sum+=ZGY;
     9d4:	b7 01       	movw	r22, r14
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatunsisf>
     9de:	9b 01       	movw	r18, r22
     9e0:	ac 01       	movw	r20, r24
     9e2:	c4 01       	movw	r24, r8
     9e4:	b3 01       	movw	r22, r6
     9e6:	0e 94 9c 07 	call	0xf38	; 0xf38 <__addsf3>
     9ea:	3b 01       	movw	r6, r22
     9ec:	4c 01       	movw	r8, r24
				m_IMU_count++;
     9ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	8b 8f       	std	Y+27, r24	; 0x1b
     9f6:	9c 8f       	std	Y+28, r25	; 0x1c
     9f8:	ed ce       	rjmp	.-550    	; 0x7d4 <main+0x1a2>
			}
			else if(m_IMU_count==Tsample+Bsample)
     9fa:	ab 8d       	ldd	r26, Y+27	; 0x1b
     9fc:	bc 8d       	ldd	r27, Y+28	; 0x1c
     9fe:	ac 54       	subi	r26, 0x4C	; 76
     a00:	b4 40       	sbci	r27, 0x04	; 4
     a02:	09 f0       	breq	.+2      	; 0xa06 <main+0x3d4>
     a04:	6f c0       	rjmp	.+222    	; 0xae4 <main+0x4b2>
			{
				//SetTimer(25,1,NULL);
				m_biasXXL=(double)m_XXL_sum/(double)Bsample;
     a06:	6d 81       	ldd	r22, Y+5	; 0x05
     a08:	7e 81       	ldd	r23, Y+6	; 0x06
     a0a:	8f 81       	ldd	r24, Y+7	; 0x07
     a0c:	98 85       	ldd	r25, Y+8	; 0x08
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	4a e7       	ldi	r20, 0x7A	; 122
     a14:	54 e4       	ldi	r21, 0x44	; 68
     a16:	0e 94 00 08 	call	0x1000	; 0x1000 <__divsf3>
     a1a:	60 93 2c 29 	sts	0x292C, r22
     a1e:	70 93 2d 29 	sts	0x292D, r23
     a22:	80 93 2e 29 	sts	0x292E, r24
     a26:	90 93 2f 29 	sts	0x292F, r25
				m_biasYXL=(double)m_YXL_sum/(double)Bsample;
     a2a:	69 81       	ldd	r22, Y+1	; 0x01
     a2c:	7a 81       	ldd	r23, Y+2	; 0x02
     a2e:	8b 81       	ldd	r24, Y+3	; 0x03
     a30:	9c 81       	ldd	r25, Y+4	; 0x04
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	4a e7       	ldi	r20, 0x7A	; 122
     a38:	54 e4       	ldi	r21, 0x44	; 68
     a3a:	0e 94 00 08 	call	0x1000	; 0x1000 <__divsf3>
     a3e:	60 93 50 23 	sts	0x2350, r22
     a42:	70 93 51 23 	sts	0x2351, r23
     a46:	80 93 52 23 	sts	0x2352, r24
     a4a:	90 93 53 23 	sts	0x2353, r25
				m_biasZXL=(double)m_ZXL_sum/(double)Bsample-GRAVITY_COUNT;
     a4e:	c2 01       	movw	r24, r4
     a50:	b1 01       	movw	r22, r2
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	4a e7       	ldi	r20, 0x7A	; 122
     a58:	54 e4       	ldi	r21, 0x44	; 68
     a5a:	0e 94 00 08 	call	0x1000	; 0x1000 <__divsf3>
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	4a e7       	ldi	r20, 0x7A	; 122
     a64:	56 e4       	ldi	r21, 0x46	; 70
     a66:	0e 94 9b 07 	call	0xf36	; 0xf36 <__subsf3>
     a6a:	60 93 43 22 	sts	0x2243, r22
     a6e:	70 93 44 22 	sts	0x2244, r23
     a72:	80 93 45 22 	sts	0x2245, r24
     a76:	90 93 46 22 	sts	0x2246, r25
				//m_biasXGY=(double)m_XGY_sum/(double)Bsample;
				//m_biasYGY=(double)m_YGY_sum/(double)Bsample;
				m_biasZGY=(double)m_ZGY_sum/(double)Bsample;
     a7a:	c4 01       	movw	r24, r8
     a7c:	b3 01       	movw	r22, r6
     a7e:	20 e0       	ldi	r18, 0x00	; 0
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	4a e7       	ldi	r20, 0x7A	; 122
     a84:	54 e4       	ldi	r21, 0x44	; 68
     a86:	0e 94 00 08 	call	0x1000	; 0x1000 <__divsf3>
     a8a:	60 93 ce 24 	sts	0x24CE, r22
     a8e:	70 93 cf 24 	sts	0x24CF, r23
     a92:	80 93 d0 24 	sts	0x24D0, r24
     a96:	90 93 d1 24 	sts	0x24D1, r25

				
				gravityVect[0]=0;
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	20 93 00 2b 	sts	0x2B00, r18
     aa6:	30 93 01 2b 	sts	0x2B01, r19
     aaa:	40 93 02 2b 	sts	0x2B02, r20
     aae:	50 93 03 2b 	sts	0x2B03, r21
				gravityVect[1]=0;
     ab2:	20 93 04 2b 	sts	0x2B04, r18
     ab6:	30 93 05 2b 	sts	0x2B05, r19
     aba:	40 93 06 2b 	sts	0x2B06, r20
     abe:	50 93 07 2b 	sts	0x2B07, r21
				gravityVect[2]=SCALE_ZXL*GRAVITY_COUNT;
     ac2:	8d ec       	ldi	r24, 0xCD	; 205
     ac4:	9c ec       	ldi	r25, 0xCC	; 204
     ac6:	ac e1       	ldi	r26, 0x1C	; 28
     ac8:	b1 e4       	ldi	r27, 0x41	; 65
     aca:	80 93 08 2b 	sts	0x2B08, r24
     ace:	90 93 09 2b 	sts	0x2B09, r25
     ad2:	a0 93 0a 2b 	sts	0x2B0A, r26
     ad6:	b0 93 0b 2b 	sts	0x2B0B, r27
     ada:	ad e4       	ldi	r26, 0x4D	; 77
     adc:	b4 e0       	ldi	r27, 0x04	; 4
     ade:	ab 8f       	std	Y+27, r26	; 0x1b
     ae0:	bc 8f       	std	Y+28, r27	; 0x1c
     ae2:	78 ce       	rjmp	.-784    	; 0x7d4 <main+0x1a2>

				//TJX=(double)(b-a)/2000000.0*32.0;

				//FF_controller();

				newT=TCC0.CNT;
     ae4:	80 91 20 08 	lds	r24, 0x0820
     ae8:	90 91 21 08 	lds	r25, 0x0821
				///////////////////////////////////////////////////////
				///////////////////////////////////////////////////////
				///////////////////////////////////////////////////////	    	
				int i,j,k;	

				m_XXL=-SCALE_XXL*((double)XXL-(double)m_biasXXL);
     aec:	b8 01       	movw	r22, r16
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatunsisf>
     af6:	20 91 2c 29 	lds	r18, 0x292C
     afa:	30 91 2d 29 	lds	r19, 0x292D
     afe:	40 91 2e 29 	lds	r20, 0x292E
     b02:	50 91 2f 29 	lds	r21, 0x292F
     b06:	0e 94 9b 07 	call	0xf36	; 0xf36 <__subsf3>
     b0a:	2e e2       	ldi	r18, 0x2E	; 46
     b0c:	30 e9       	ldi	r19, 0x90	; 144
     b0e:	40 e2       	ldi	r20, 0x20	; 32
     b10:	5a eb       	ldi	r21, 0xBA	; 186
     b12:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__mulsf3>
     b16:	60 93 f0 20 	sts	0x20F0, r22
     b1a:	70 93 f1 20 	sts	0x20F1, r23
     b1e:	80 93 f2 20 	sts	0x20F2, r24
     b22:	90 93 f3 20 	sts	0x20F3, r25
				m_YXL=-SCALE_YXL*((double)YXL-(double)m_biasYXL);
     b26:	b6 01       	movw	r22, r12
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatunsisf>
     b30:	20 91 50 23 	lds	r18, 0x2350
     b34:	30 91 51 23 	lds	r19, 0x2351
     b38:	40 91 52 23 	lds	r20, 0x2352
     b3c:	50 91 53 23 	lds	r21, 0x2353
     b40:	0e 94 9b 07 	call	0xf36	; 0xf36 <__subsf3>
     b44:	2e e2       	ldi	r18, 0x2E	; 46
     b46:	30 e9       	ldi	r19, 0x90	; 144
     b48:	40 e2       	ldi	r20, 0x20	; 32
     b4a:	5a eb       	ldi	r21, 0xBA	; 186
     b4c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__mulsf3>
     b50:	60 93 32 20 	sts	0x2032, r22
     b54:	70 93 33 20 	sts	0x2033, r23
     b58:	80 93 34 20 	sts	0x2034, r24
     b5c:	90 93 35 20 	sts	0x2035, r25
				m_ZXL=SCALE_ZXL*((double)ZXL-(double)m_biasZXL);
     b60:	b5 01       	movw	r22, r10
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatunsisf>
     b6a:	20 91 43 22 	lds	r18, 0x2243
     b6e:	30 91 44 22 	lds	r19, 0x2244
     b72:	40 91 45 22 	lds	r20, 0x2245
     b76:	50 91 46 22 	lds	r21, 0x2246
     b7a:	0e 94 9b 07 	call	0xf36	; 0xf36 <__subsf3>
     b7e:	2e e2       	ldi	r18, 0x2E	; 46
     b80:	30 e9       	ldi	r19, 0x90	; 144
     b82:	40 e2       	ldi	r20, 0x20	; 32
     b84:	5a e3       	ldi	r21, 0x3A	; 58
     b86:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__mulsf3>
     b8a:	60 93 a1 22 	sts	0x22A1, r22
     b8e:	70 93 a2 22 	sts	0x22A2, r23
     b92:	80 93 a3 22 	sts	0x22A3, r24
     b96:	90 93 a4 22 	sts	0x22A4, r25
				m_XGY=-SCALE_XGY*((double)XGY-(double)m_biasXGY);//-0.001212142/0.00015711
     b9a:	ed 85       	ldd	r30, Y+13	; 0x0d
     b9c:	fe 85       	ldd	r31, Y+14	; 0x0e
     b9e:	bf 01       	movw	r22, r30
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatunsisf>
     ba8:	20 91 ec 20 	lds	r18, 0x20EC
     bac:	30 91 ed 20 	lds	r19, 0x20ED
     bb0:	40 91 ee 20 	lds	r20, 0x20EE
     bb4:	50 91 ef 20 	lds	r21, 0x20EF
     bb8:	0e 94 9b 07 	call	0xf36	; 0xf36 <__subsf3>
     bbc:	29 ea       	ldi	r18, 0xA9	; 169
     bbe:	34 ee       	ldi	r19, 0xE4	; 228
     bc0:	49 e1       	ldi	r20, 0x19	; 25
     bc2:	59 eb       	ldi	r21, 0xB9	; 185
     bc4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__mulsf3>
     bc8:	60 93 e8 21 	sts	0x21E8, r22
     bcc:	70 93 e9 21 	sts	0x21E9, r23
     bd0:	80 93 ea 21 	sts	0x21EA, r24
     bd4:	90 93 eb 21 	sts	0x21EB, r25
				m_YGY=SCALE_YGY*((double)YGY-(double)m_biasYGY);//+
     bd8:	2b 85       	ldd	r18, Y+11	; 0x0b
     bda:	3c 85       	ldd	r19, Y+12	; 0x0c
     bdc:	b9 01       	movw	r22, r18
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatunsisf>
     be6:	20 91 30 29 	lds	r18, 0x2930
     bea:	30 91 31 29 	lds	r19, 0x2931
     bee:	40 91 32 29 	lds	r20, 0x2932
     bf2:	50 91 33 29 	lds	r21, 0x2933
     bf6:	0e 94 9b 07 	call	0xf36	; 0xf36 <__subsf3>
     bfa:	29 ea       	ldi	r18, 0xA9	; 169
     bfc:	34 ee       	ldi	r19, 0xE4	; 228
     bfe:	49 e1       	ldi	r20, 0x19	; 25
     c00:	59 e3       	ldi	r21, 0x39	; 57
     c02:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__mulsf3>
     c06:	60 93 94 20 	sts	0x2094, r22
     c0a:	70 93 95 20 	sts	0x2095, r23
     c0e:	80 93 96 20 	sts	0x2096, r24
     c12:	90 93 97 20 	sts	0x2097, r25
				//if(ZGY<3000)	m_ZGY=SCALE_ZGY*((double)ZGY-(double)m_biasZGY+65536.0);
				//else 			m_ZGY=SCALE_ZGY*((double)ZGY-(double)m_biasZGY);//+
				m_ZGY=SCALE_ZGY*((double)ZGY-(double)m_biasZGY);
     c16:	b7 01       	movw	r22, r14
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatunsisf>
     c20:	20 91 ce 24 	lds	r18, 0x24CE
     c24:	30 91 cf 24 	lds	r19, 0x24CF
     c28:	40 91 d0 24 	lds	r20, 0x24D0
     c2c:	50 91 d1 24 	lds	r21, 0x24D1
     c30:	0e 94 9b 07 	call	0xf36	; 0xf36 <__subsf3>
     c34:	29 e7       	ldi	r18, 0x79	; 121
     c36:	32 e2       	ldi	r19, 0x22	; 34
     c38:	40 e2       	ldi	r20, 0x20	; 32
     c3a:	59 e3       	ldi	r21, 0x39	; 57
     c3c:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__mulsf3>
     c40:	60 93 1c 29 	sts	0x291C, r22
     c44:	70 93 1d 29 	sts	0x291D, r23
     c48:	80 93 1e 29 	sts	0x291E, r24
     c4c:	90 93 1f 29 	sts	0x291F, r25
				
				sprintf(XYZ_buffer,"%u %u %u %u %u %u \n",XXL, YXL, ZXL, XGY, YGY, ZGY);
     c50:	4d b7       	in	r20, 0x3d	; 61
     c52:	5e b7       	in	r21, 0x3e	; 62
     c54:	40 51       	subi	r20, 0x10	; 16
     c56:	50 40       	sbci	r21, 0x00	; 0
     c58:	4d bf       	out	0x3d, r20	; 61
     c5a:	5e bf       	out	0x3e, r21	; 62
     c5c:	ed b7       	in	r30, 0x3d	; 61
     c5e:	fe b7       	in	r31, 0x3e	; 62
     c60:	31 96       	adiw	r30, 0x01	; 1
     c62:	22 ed       	ldi	r18, 0xD2	; 210
     c64:	34 e2       	ldi	r19, 0x24	; 36
     c66:	ad b7       	in	r26, 0x3d	; 61
     c68:	be b7       	in	r27, 0x3e	; 62
     c6a:	11 96       	adiw	r26, 0x01	; 1
     c6c:	2d 93       	st	X+, r18
     c6e:	3c 93       	st	X, r19
     c70:	12 97       	sbiw	r26, 0x02	; 2
     c72:	40 e0       	ldi	r20, 0x00	; 0
     c74:	50 e2       	ldi	r21, 0x20	; 32
     c76:	42 83       	std	Z+2, r20	; 0x02
     c78:	53 83       	std	Z+3, r21	; 0x03
     c7a:	04 83       	std	Z+4, r16	; 0x04
     c7c:	15 83       	std	Z+5, r17	; 0x05
     c7e:	c6 82       	std	Z+6, r12	; 0x06
     c80:	d7 82       	std	Z+7, r13	; 0x07
     c82:	a0 86       	std	Z+8, r10	; 0x08
     c84:	b1 86       	std	Z+9, r11	; 0x09
     c86:	8d 85       	ldd	r24, Y+13	; 0x0d
     c88:	9e 85       	ldd	r25, Y+14	; 0x0e
     c8a:	82 87       	std	Z+10, r24	; 0x0a
     c8c:	93 87       	std	Z+11, r25	; 0x0b
     c8e:	ab 85       	ldd	r26, Y+11	; 0x0b
     c90:	bc 85       	ldd	r27, Y+12	; 0x0c
     c92:	a4 87       	std	Z+12, r26	; 0x0c
     c94:	b5 87       	std	Z+13, r27	; 0x0d
     c96:	e6 86       	std	Z+14, r14	; 0x0e
     c98:	f7 86       	std	Z+15, r15	; 0x0f
     c9a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <sprintf>
				uartC0SendTX((unsigned char*)XYZ_buffer);
     c9e:	ed b7       	in	r30, 0x3d	; 61
     ca0:	fe b7       	in	r31, 0x3e	; 62
     ca2:	70 96       	adiw	r30, 0x10	; 16
     ca4:	ed bf       	out	0x3d, r30	; 61
     ca6:	fe bf       	out	0x3e, r31	; 62
     ca8:	82 ed       	ldi	r24, 0xD2	; 210
     caa:	94 e2       	ldi	r25, 0x24	; 36
     cac:	0e 94 e5 01 	call	0x3ca	; 0x3ca <uartC0SendTX>
     cb0:	91 cd       	rjmp	.-1246   	; 0x7d4 <main+0x1a2>

00000cb2 <__vector_58>:
//
	USART_RXComplete(&USARTD0_data);
}

ISR(USARTE0_RXC_vect)
{
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	0f 92       	push	r0
     cba:	0b b6       	in	r0, 0x3b	; 59
     cbc:	0f 92       	push	r0
     cbe:	11 24       	eor	r1, r1
     cc0:	2f 93       	push	r18
     cc2:	3f 93       	push	r19
     cc4:	4f 93       	push	r20
     cc6:	5f 93       	push	r21
     cc8:	6f 93       	push	r22
     cca:	7f 93       	push	r23
     ccc:	8f 93       	push	r24
     cce:	9f 93       	push	r25
     cd0:	af 93       	push	r26
     cd2:	bf 93       	push	r27
     cd4:	ef 93       	push	r30
     cd6:	ff 93       	push	r31
//	if(!USART_RXBufferData_Available(&USARTD0_data))
//	{
//		USART_InterruptDriver_Initialize(&USARTD0_data, &USARTD0, USART_DREINTLVL_LO_gc);
//	}
//
	USART_RXComplete(&USARTE0_data);
     cd8:	81 e1       	ldi	r24, 0x11	; 17
     cda:	98 e2       	ldi	r25, 0x28	; 40
     cdc:	0e 94 7c 07 	call	0xef8	; 0xef8 <USART_RXComplete>
}
     ce0:	ff 91       	pop	r31
     ce2:	ef 91       	pop	r30
     ce4:	bf 91       	pop	r27
     ce6:	af 91       	pop	r26
     ce8:	9f 91       	pop	r25
     cea:	8f 91       	pop	r24
     cec:	7f 91       	pop	r23
     cee:	6f 91       	pop	r22
     cf0:	5f 91       	pop	r21
     cf2:	4f 91       	pop	r20
     cf4:	3f 91       	pop	r19
     cf6:	2f 91       	pop	r18
     cf8:	0f 90       	pop	r0
     cfa:	0b be       	out	0x3b, r0	; 59
     cfc:	0f 90       	pop	r0
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	0f 90       	pop	r0
     d02:	1f 90       	pop	r1
     d04:	18 95       	reti

00000d06 <__vector_88>:
//
	USART_RXComplete(&USARTC0_data);
}

ISR(USARTD0_RXC_vect)
{
     d06:	1f 92       	push	r1
     d08:	0f 92       	push	r0
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	0f 92       	push	r0
     d0e:	0b b6       	in	r0, 0x3b	; 59
     d10:	0f 92       	push	r0
     d12:	11 24       	eor	r1, r1
     d14:	2f 93       	push	r18
     d16:	3f 93       	push	r19
     d18:	4f 93       	push	r20
     d1a:	5f 93       	push	r21
     d1c:	6f 93       	push	r22
     d1e:	7f 93       	push	r23
     d20:	8f 93       	push	r24
     d22:	9f 93       	push	r25
     d24:	af 93       	push	r26
     d26:	bf 93       	push	r27
     d28:	ef 93       	push	r30
     d2a:	ff 93       	push	r31
//	if(!USART_RXBufferData_Available(&USARTD0_data))
//	{
//		USART_InterruptDriver_Initialize(&USARTD0_data, &USARTD0, USART_DREINTLVL_LO_gc);
//	}
//
	USART_RXComplete(&USARTD0_data);
     d2c:	83 ec       	ldi	r24, 0xC3	; 195
     d2e:	93 e2       	ldi	r25, 0x23	; 35
     d30:	0e 94 7c 07 	call	0xef8	; 0xef8 <USART_RXComplete>
}
     d34:	ff 91       	pop	r31
     d36:	ef 91       	pop	r30
     d38:	bf 91       	pop	r27
     d3a:	af 91       	pop	r26
     d3c:	9f 91       	pop	r25
     d3e:	8f 91       	pop	r24
     d40:	7f 91       	pop	r23
     d42:	6f 91       	pop	r22
     d44:	5f 91       	pop	r21
     d46:	4f 91       	pop	r20
     d48:	3f 91       	pop	r19
     d4a:	2f 91       	pop	r18
     d4c:	0f 90       	pop	r0
     d4e:	0b be       	out	0x3b, r0	; 59
     d50:	0f 90       	pop	r0
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	0f 90       	pop	r0
     d56:	1f 90       	pop	r1
     d58:	18 95       	reti

00000d5a <__vector_25>:
	
	samplingFlag=1;
//	sei();
}
ISR(USARTC0_RXC_vect)
{
     d5a:	1f 92       	push	r1
     d5c:	0f 92       	push	r0
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	0f 92       	push	r0
     d62:	0b b6       	in	r0, 0x3b	; 59
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	2f 93       	push	r18
     d6a:	3f 93       	push	r19
     d6c:	4f 93       	push	r20
     d6e:	5f 93       	push	r21
     d70:	6f 93       	push	r22
     d72:	7f 93       	push	r23
     d74:	8f 93       	push	r24
     d76:	9f 93       	push	r25
     d78:	af 93       	push	r26
     d7a:	bf 93       	push	r27
     d7c:	ef 93       	push	r30
     d7e:	ff 93       	push	r31
//	if(!USART_RXBufferData_Available(&USARTD0_data))
//	{
//		USART_InterruptDriver_Initialize(&USARTD0_data, &USARTD0, USART_DREINTLVL_LO_gc);
//	}
//
	USART_RXComplete(&USARTC0_data);
     d80:	87 e9       	ldi	r24, 0x97	; 151
     d82:	96 e2       	ldi	r25, 0x26	; 38
     d84:	0e 94 7c 07 	call	0xef8	; 0xef8 <USART_RXComplete>
}
     d88:	ff 91       	pop	r31
     d8a:	ef 91       	pop	r30
     d8c:	bf 91       	pop	r27
     d8e:	af 91       	pop	r26
     d90:	9f 91       	pop	r25
     d92:	8f 91       	pop	r24
     d94:	7f 91       	pop	r23
     d96:	6f 91       	pop	r22
     d98:	5f 91       	pop	r21
     d9a:	4f 91       	pop	r20
     d9c:	3f 91       	pop	r19
     d9e:	2f 91       	pop	r18
     da0:	0f 90       	pop	r0
     da2:	0b be       	out	0x3b, r0	; 59
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	0f 90       	pop	r0
     daa:	1f 90       	pop	r1
     dac:	18 95       	reti

00000dae <SPI_MasterInit>:
                    bool lsbFirst,
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision)
{
     dae:	af 92       	push	r10
     db0:	cf 92       	push	r12
     db2:	ef 92       	push	r14
     db4:	0f 93       	push	r16
     db6:	dc 01       	movw	r26, r24
     db8:	fa 01       	movw	r30, r20
	spi->module         = module;
     dba:	6d 93       	st	X+, r22
     dbc:	7c 93       	st	X, r23
     dbe:	11 97       	sbiw	r26, 0x01	; 1
	spi->port           = port;
     dc0:	12 96       	adiw	r26, 0x02	; 2
     dc2:	4d 93       	st	X+, r20
     dc4:	5c 93       	st	X, r21
     dc6:	13 97       	sbiw	r26, 0x03	; 3
	spi->interrupted    = false;
     dc8:	14 96       	adiw	r26, 0x04	; 4
     dca:	1c 92       	st	X, r1
     dcc:	14 97       	sbiw	r26, 0x04	; 4

	spi->port->DIRSET  = SPI_SS_bm;
     dce:	80 e1       	ldi	r24, 0x10	; 16
     dd0:	81 83       	std	Z+1, r24	; 0x01

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
     dd2:	ed 91       	ld	r30, X+
     dd4:	fc 91       	ld	r31, X
     dd6:	11 97       	sbiw	r26, 0x01	; 1
     dd8:	cc 20       	and	r12, r12
     dda:	11 f4       	brne	.+4      	; 0xde0 <SPI_MasterInit+0x32>
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <SPI_MasterInit+0x34>
     de0:	90 e8       	ldi	r25, 0x80	; 128
     de2:	22 23       	and	r18, r18
     de4:	11 f4       	brne	.+4      	; 0xdea <SPI_MasterInit+0x3c>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	01 c0       	rjmp	.+2      	; 0xdec <SPI_MasterInit+0x3e>
     dea:	80 e2       	ldi	r24, 0x20	; 32
     dec:	00 65       	ori	r16, 0x50	; 80
     dee:	0a 29       	or	r16, r10
     df0:	90 2b       	or	r25, r16
     df2:	89 2b       	or	r24, r25
     df4:	80 83       	st	Z, r24
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
     df6:	ed 91       	ld	r30, X+
     df8:	fc 91       	ld	r31, X
     dfa:	11 97       	sbiw	r26, 0x01	; 1
     dfc:	e1 82       	std	Z+1, r14	; 0x01

	/* No assigned data packet. */
	spi->dataPacket = NULL;
     dfe:	15 96       	adiw	r26, 0x05	; 5
     e00:	1d 92       	st	X+, r1
     e02:	1c 92       	st	X, r1
     e04:	16 97       	sbiw	r26, 0x06	; 6

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
     e06:	12 96       	adiw	r26, 0x02	; 2
     e08:	ed 91       	ld	r30, X+
     e0a:	fc 91       	ld	r31, X
     e0c:	13 97       	sbiw	r26, 0x03	; 3
     e0e:	80 ea       	ldi	r24, 0xA0	; 160
     e10:	81 83       	std	Z+1, r24	; 0x01
}
     e12:	0f 91       	pop	r16
     e14:	ef 90       	pop	r14
     e16:	cf 90       	pop	r12
     e18:	af 90       	pop	r10
     e1a:	08 95       	ret

00000e1c <SPI_MasterCreateDataPacket>:
                                const uint8_t *transmitData,
                                uint8_t *receiveData,
                                uint8_t bytesToTransceive,
                                PORT_t *ssPort,
                                uint8_t ssPinMask)
{
     e1c:	ef 92       	push	r14
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	fc 01       	movw	r30, r24
	dataPacket->ssPort            = ssPort;
     e24:	00 83       	st	Z, r16
     e26:	11 83       	std	Z+1, r17	; 0x01
	dataPacket->ssPinMask         = ssPinMask;
     e28:	e2 82       	std	Z+2, r14	; 0x02
	dataPacket->transmitData      = transmitData;
     e2a:	63 83       	std	Z+3, r22	; 0x03
     e2c:	74 83       	std	Z+4, r23	; 0x04
	dataPacket->receiveData       = receiveData;
     e2e:	45 83       	std	Z+5, r20	; 0x05
     e30:	56 83       	std	Z+6, r21	; 0x06
	dataPacket->bytesToTransceive  = bytesToTransceive;
     e32:	27 83       	std	Z+7, r18	; 0x07
	dataPacket->bytesTransceived   = 0;
     e34:	10 86       	std	Z+8, r1	; 0x08
	dataPacket->complete          = false;
     e36:	11 86       	std	Z+9, r1	; 0x09
}
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ef 90       	pop	r14
     e3e:	08 95       	ret

00000e40 <SPI_MasterTransceiveByte>:
 *  \param TXdata     Data to transmit to slave.
 *
 *  \return           Data received from slave.
 */
uint8_t SPI_MasterTransceiveByte(SPI_Master_t *spi, uint8_t TXdata)
{
     e40:	fc 01       	movw	r30, r24
	/* Send pattern. */
	spi->module->DATA = TXdata;
     e42:	a0 81       	ld	r26, Z
     e44:	b1 81       	ldd	r27, Z+1	; 0x01
     e46:	13 96       	adiw	r26, 0x03	; 3
     e48:	6c 93       	st	X, r22

	/* Wait for transmission complete. */
	while(!(spi->module->STATUS & SPI_IF_bm)) {
     e4a:	01 90       	ld	r0, Z+
     e4c:	f0 81       	ld	r31, Z
     e4e:	e0 2d       	mov	r30, r0
     e50:	82 81       	ldd	r24, Z+2	; 0x02
     e52:	87 ff       	sbrs	r24, 7
     e54:	fd cf       	rjmp	.-6      	; 0xe50 <SPI_MasterTransceiveByte+0x10>

	}
	/* Read received data. */
	uint8_t result = spi->module->DATA;
     e56:	83 81       	ldd	r24, Z+3	; 0x03

	return(result);
}
     e58:	08 95       	ret

00000e5a <SPI_MasterTransceivePacket>:
 *  \retval true	   Success
 *  \retval false	   Failure
 */
bool SPI_MasterTransceivePacket(SPI_Master_t *spi,
                                SPI_DataPacket_t *dataPacket)
{
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	ec 01       	movw	r28, r24
     e60:	fb 01       	movw	r30, r22
	/* Check if data packet has been created. */
	if(dataPacket == NULL) {
     e62:	61 15       	cp	r22, r1
     e64:	71 05       	cpc	r23, r1
     e66:	11 f4       	brne	.+4      	; 0xe6c <SPI_MasterTransceivePacket+0x12>
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	37 c0       	rjmp	.+110    	; 0xeda <SPI_MasterTransceivePacket+0x80>
		return false;
	}

	/* Assign datapacket to SPI module. */
	spi->dataPacket = dataPacket;
     e6c:	6d 83       	std	Y+5, r22	; 0x05
     e6e:	7e 83       	std	Y+6, r23	; 0x06

	uint8_t ssPinMask = spi->dataPacket->ssPinMask;
     e70:	42 81       	ldd	r20, Z+2	; 0x02

	/* If SS signal to slave(s). */
	if (spi->dataPacket->ssPort != NULL) {
     e72:	a0 81       	ld	r26, Z
     e74:	b1 81       	ldd	r27, Z+1	; 0x01
     e76:	10 97       	sbiw	r26, 0x00	; 0
     e78:	11 f0       	breq	.+4      	; 0xe7e <SPI_MasterTransceivePacket+0x24>
		/* SS to slave(s) low. */
		SPI_MasterSSLow(spi->dataPacket->ssPort, ssPinMask);
     e7a:	16 96       	adiw	r26, 0x06	; 6
     e7c:	4c 93       	st	X, r20
	}

	/* Transceive bytes. */
	uint8_t bytesTransceived = 0;
	uint8_t bytesToTransceive = dataPacket->bytesToTransceive;
     e7e:	67 81       	ldd	r22, Z+7	; 0x07
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	1a c0       	rjmp	.+52     	; 0xeb8 <SPI_MasterTransceivePacket+0x5e>
	while (bytesTransceived < bytesToTransceive) {

		/* Send pattern. */
		uint8_t data = spi->dataPacket->transmitData[bytesTransceived];
     e84:	29 2f       	mov	r18, r25
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	03 80       	ldd	r0, Z+3	; 0x03
     e8a:	f4 81       	ldd	r31, Z+4	; 0x04
     e8c:	e0 2d       	mov	r30, r0
     e8e:	e2 0f       	add	r30, r18
     e90:	f3 1f       	adc	r31, r19
     e92:	80 81       	ld	r24, Z
		spi->module->DATA = data;
     e94:	e8 81       	ld	r30, Y
     e96:	f9 81       	ldd	r31, Y+1	; 0x01
     e98:	83 83       	std	Z+3, r24	; 0x03

		/* Wait for transmission complete. */
		while(!(spi->module->STATUS & SPI_IF_bm)) {
     e9a:	e8 81       	ld	r30, Y
     e9c:	f9 81       	ldd	r31, Y+1	; 0x01
     e9e:	82 81       	ldd	r24, Z+2	; 0x02
     ea0:	87 ff       	sbrs	r24, 7
     ea2:	fd cf       	rjmp	.-6      	; 0xe9e <SPI_MasterTransceivePacket+0x44>

		}
		/* Read received data. */
		data = spi->module->DATA;
     ea4:	83 81       	ldd	r24, Z+3	; 0x03
		spi->dataPacket->receiveData[bytesTransceived] = data;
     ea6:	ed 81       	ldd	r30, Y+5	; 0x05
     ea8:	fe 81       	ldd	r31, Y+6	; 0x06
     eaa:	05 80       	ldd	r0, Z+5	; 0x05
     eac:	f6 81       	ldd	r31, Z+6	; 0x06
     eae:	e0 2d       	mov	r30, r0
     eb0:	e2 0f       	add	r30, r18
     eb2:	f3 1f       	adc	r31, r19
     eb4:	80 83       	st	Z, r24

		bytesTransceived++;
     eb6:	9f 5f       	subi	r25, 0xFF	; 255
     eb8:	ed 81       	ldd	r30, Y+5	; 0x05
     eba:	fe 81       	ldd	r31, Y+6	; 0x06
	}

	/* Transceive bytes. */
	uint8_t bytesTransceived = 0;
	uint8_t bytesToTransceive = dataPacket->bytesToTransceive;
	while (bytesTransceived < bytesToTransceive) {
     ebc:	96 17       	cp	r25, r22
     ebe:	10 f3       	brcs	.-60     	; 0xe84 <SPI_MasterTransceivePacket+0x2a>

		bytesTransceived++;
	}

	/* If SS signal to slave(s). */
	if (spi->dataPacket->ssPort != NULL) {
     ec0:	01 90       	ld	r0, Z+
     ec2:	f0 81       	ld	r31, Z
     ec4:	e0 2d       	mov	r30, r0
     ec6:	30 97       	sbiw	r30, 0x00	; 0
     ec8:	09 f0       	breq	.+2      	; 0xecc <SPI_MasterTransceivePacket+0x72>
		/* Release SS to slave(s). */
		SPI_MasterSSHigh(spi->dataPacket->ssPort, ssPinMask);
     eca:	45 83       	std	Z+5, r20	; 0x05
	}

	/* Set variables to indicate that transmission is complete. */
	spi->dataPacket->bytesTransceived = bytesTransceived;
     ecc:	ed 81       	ldd	r30, Y+5	; 0x05
     ece:	fe 81       	ldd	r31, Y+6	; 0x06
     ed0:	60 87       	std	Z+8, r22	; 0x08
	spi->dataPacket->complete = true;
     ed2:	ed 81       	ldd	r30, Y+5	; 0x05
     ed4:	fe 81       	ldd	r31, Y+6	; 0x06
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	81 87       	std	Z+9, r24	; 0x09

	/* Report success. */
	return true;
}
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel          Data register empty interrupt level.
 */
void USART_InterruptDriver_Initialize(USART_data_t * usart_data,
                                      USART_t * usart,
                                      USART_DREINTLVL_t dreIntLevel)
{
     ee0:	fc 01       	movw	r30, r24
	usart_data->usart = usart;
     ee2:	60 83       	st	Z, r22
     ee4:	71 83       	std	Z+1, r23	; 0x01
	usart_data->dreIntLevel = dreIntLevel;
     ee6:	42 83       	std	Z+2, r20	; 0x02

	usart_data->buffer.RX_Tail = 0;
     ee8:	e8 5f       	subi	r30, 0xF8	; 248
     eea:	fe 4f       	sbci	r31, 0xFE	; 254
     eec:	10 82       	st	Z, r1
	usart_data->buffer.RX_Head = 0;
     eee:	12 92       	st	-Z, r1
	usart_data->buffer.TX_Tail = 0;
     ef0:	33 96       	adiw	r30, 0x03	; 3
     ef2:	10 82       	st	Z, r1
	usart_data->buffer.TX_Head = 0;
     ef4:	12 92       	st	-Z, r1
}
     ef6:	08 95       	ret

00000ef8 <USART_RXComplete>:
 *  Stores received data in RX software buffer.
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
bool USART_RXComplete(USART_data_t * usart_data)
{
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	dc 01       	movw	r26, r24
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     efe:	ec 01       	movw	r28, r24
     f00:	c9 5f       	subi	r28, 0xF9	; 249
     f02:	de 4f       	sbci	r29, 0xFE	; 254
     f04:	98 81       	ld	r25, Y
     f06:	9f 5f       	subi	r25, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     f08:	a8 5f       	subi	r26, 0xF8	; 248
     f0a:	be 4f       	sbci	r27, 0xFE	; 254
     f0c:	8c 91       	ld	r24, X
     f0e:	a8 50       	subi	r26, 0x08	; 8
     f10:	b1 40       	sbci	r27, 0x01	; 1
	uint8_t data = usart_data->usart->DATA;
     f12:	ed 91       	ld	r30, X+
     f14:	fc 91       	ld	r31, X
     f16:	11 97       	sbiw	r26, 0x01	; 1
     f18:	e0 81       	ld	r30, Z

	if (tempRX_Head == tempRX_Tail) {
     f1a:	98 17       	cp	r25, r24
     f1c:	11 f4       	brne	.+4      	; 0xf22 <USART_RXComplete+0x2a>
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	07 c0       	rjmp	.+14     	; 0xf30 <USART_RXComplete+0x38>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     f22:	88 81       	ld	r24, Y
     f24:	a8 0f       	add	r26, r24
     f26:	b1 1d       	adc	r27, r1
     f28:	13 96       	adiw	r26, 0x03	; 3
     f2a:	ec 93       	st	X, r30
		usart_data->buffer.RX_Head = tempRX_Head;
     f2c:	98 83       	st	Y, r25
     f2e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return ans;
}
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <__subsf3>:
     f36:	50 58       	subi	r21, 0x80	; 128

00000f38 <__addsf3>:
     f38:	bb 27       	eor	r27, r27
     f3a:	aa 27       	eor	r26, r26
     f3c:	0e d0       	rcall	.+28     	; 0xf5a <__addsf3x>
     f3e:	1c c1       	rjmp	.+568    	; 0x1178 <__fp_round>
     f40:	0d d1       	rcall	.+538    	; 0x115c <__fp_pscA>
     f42:	30 f0       	brcs	.+12     	; 0xf50 <__addsf3+0x18>
     f44:	12 d1       	rcall	.+548    	; 0x116a <__fp_pscB>
     f46:	20 f0       	brcs	.+8      	; 0xf50 <__addsf3+0x18>
     f48:	31 f4       	brne	.+12     	; 0xf56 <__addsf3+0x1e>
     f4a:	9f 3f       	cpi	r25, 0xFF	; 255
     f4c:	11 f4       	brne	.+4      	; 0xf52 <__addsf3+0x1a>
     f4e:	1e f4       	brtc	.+6      	; 0xf56 <__addsf3+0x1e>
     f50:	02 c1       	rjmp	.+516    	; 0x1156 <__fp_nan>
     f52:	0e f4       	brtc	.+2      	; 0xf56 <__addsf3+0x1e>
     f54:	e0 95       	com	r30
     f56:	e7 fb       	bst	r30, 7
     f58:	f8 c0       	rjmp	.+496    	; 0x114a <__fp_inf>

00000f5a <__addsf3x>:
     f5a:	e9 2f       	mov	r30, r25
     f5c:	1e d1       	rcall	.+572    	; 0x119a <__fp_split3>
     f5e:	80 f3       	brcs	.-32     	; 0xf40 <__addsf3+0x8>
     f60:	ba 17       	cp	r27, r26
     f62:	62 07       	cpc	r22, r18
     f64:	73 07       	cpc	r23, r19
     f66:	84 07       	cpc	r24, r20
     f68:	95 07       	cpc	r25, r21
     f6a:	18 f0       	brcs	.+6      	; 0xf72 <__addsf3x+0x18>
     f6c:	71 f4       	brne	.+28     	; 0xf8a <__addsf3x+0x30>
     f6e:	9e f5       	brtc	.+102    	; 0xfd6 <__addsf3x+0x7c>
     f70:	36 c1       	rjmp	.+620    	; 0x11de <__fp_zero>
     f72:	0e f4       	brtc	.+2      	; 0xf76 <__addsf3x+0x1c>
     f74:	e0 95       	com	r30
     f76:	0b 2e       	mov	r0, r27
     f78:	ba 2f       	mov	r27, r26
     f7a:	a0 2d       	mov	r26, r0
     f7c:	0b 01       	movw	r0, r22
     f7e:	b9 01       	movw	r22, r18
     f80:	90 01       	movw	r18, r0
     f82:	0c 01       	movw	r0, r24
     f84:	ca 01       	movw	r24, r20
     f86:	a0 01       	movw	r20, r0
     f88:	11 24       	eor	r1, r1
     f8a:	ff 27       	eor	r31, r31
     f8c:	59 1b       	sub	r21, r25
     f8e:	99 f0       	breq	.+38     	; 0xfb6 <__addsf3x+0x5c>
     f90:	59 3f       	cpi	r21, 0xF9	; 249
     f92:	50 f4       	brcc	.+20     	; 0xfa8 <__addsf3x+0x4e>
     f94:	50 3e       	cpi	r21, 0xE0	; 224
     f96:	68 f1       	brcs	.+90     	; 0xff2 <__addsf3x+0x98>
     f98:	1a 16       	cp	r1, r26
     f9a:	f0 40       	sbci	r31, 0x00	; 0
     f9c:	a2 2f       	mov	r26, r18
     f9e:	23 2f       	mov	r18, r19
     fa0:	34 2f       	mov	r19, r20
     fa2:	44 27       	eor	r20, r20
     fa4:	58 5f       	subi	r21, 0xF8	; 248
     fa6:	f3 cf       	rjmp	.-26     	; 0xf8e <__addsf3x+0x34>
     fa8:	46 95       	lsr	r20
     faa:	37 95       	ror	r19
     fac:	27 95       	ror	r18
     fae:	a7 95       	ror	r26
     fb0:	f0 40       	sbci	r31, 0x00	; 0
     fb2:	53 95       	inc	r21
     fb4:	c9 f7       	brne	.-14     	; 0xfa8 <__addsf3x+0x4e>
     fb6:	7e f4       	brtc	.+30     	; 0xfd6 <__addsf3x+0x7c>
     fb8:	1f 16       	cp	r1, r31
     fba:	ba 0b       	sbc	r27, r26
     fbc:	62 0b       	sbc	r22, r18
     fbe:	73 0b       	sbc	r23, r19
     fc0:	84 0b       	sbc	r24, r20
     fc2:	ba f0       	brmi	.+46     	; 0xff2 <__addsf3x+0x98>
     fc4:	91 50       	subi	r25, 0x01	; 1
     fc6:	a1 f0       	breq	.+40     	; 0xff0 <__addsf3x+0x96>
     fc8:	ff 0f       	add	r31, r31
     fca:	bb 1f       	adc	r27, r27
     fcc:	66 1f       	adc	r22, r22
     fce:	77 1f       	adc	r23, r23
     fd0:	88 1f       	adc	r24, r24
     fd2:	c2 f7       	brpl	.-16     	; 0xfc4 <__addsf3x+0x6a>
     fd4:	0e c0       	rjmp	.+28     	; 0xff2 <__addsf3x+0x98>
     fd6:	ba 0f       	add	r27, r26
     fd8:	62 1f       	adc	r22, r18
     fda:	73 1f       	adc	r23, r19
     fdc:	84 1f       	adc	r24, r20
     fde:	48 f4       	brcc	.+18     	; 0xff2 <__addsf3x+0x98>
     fe0:	87 95       	ror	r24
     fe2:	77 95       	ror	r23
     fe4:	67 95       	ror	r22
     fe6:	b7 95       	ror	r27
     fe8:	f7 95       	ror	r31
     fea:	9e 3f       	cpi	r25, 0xFE	; 254
     fec:	08 f0       	brcs	.+2      	; 0xff0 <__addsf3x+0x96>
     fee:	b3 cf       	rjmp	.-154    	; 0xf56 <__addsf3+0x1e>
     ff0:	93 95       	inc	r25
     ff2:	88 0f       	add	r24, r24
     ff4:	08 f0       	brcs	.+2      	; 0xff8 <__addsf3x+0x9e>
     ff6:	99 27       	eor	r25, r25
     ff8:	ee 0f       	add	r30, r30
     ffa:	97 95       	ror	r25
     ffc:	87 95       	ror	r24
     ffe:	08 95       	ret

00001000 <__divsf3>:
    1000:	0c d0       	rcall	.+24     	; 0x101a <__divsf3x>
    1002:	ba c0       	rjmp	.+372    	; 0x1178 <__fp_round>
    1004:	b2 d0       	rcall	.+356    	; 0x116a <__fp_pscB>
    1006:	40 f0       	brcs	.+16     	; 0x1018 <__divsf3+0x18>
    1008:	a9 d0       	rcall	.+338    	; 0x115c <__fp_pscA>
    100a:	30 f0       	brcs	.+12     	; 0x1018 <__divsf3+0x18>
    100c:	21 f4       	brne	.+8      	; 0x1016 <__divsf3+0x16>
    100e:	5f 3f       	cpi	r21, 0xFF	; 255
    1010:	19 f0       	breq	.+6      	; 0x1018 <__divsf3+0x18>
    1012:	9b c0       	rjmp	.+310    	; 0x114a <__fp_inf>
    1014:	51 11       	cpse	r21, r1
    1016:	e4 c0       	rjmp	.+456    	; 0x11e0 <__fp_szero>
    1018:	9e c0       	rjmp	.+316    	; 0x1156 <__fp_nan>

0000101a <__divsf3x>:
    101a:	bf d0       	rcall	.+382    	; 0x119a <__fp_split3>
    101c:	98 f3       	brcs	.-26     	; 0x1004 <__divsf3+0x4>

0000101e <__divsf3_pse>:
    101e:	99 23       	and	r25, r25
    1020:	c9 f3       	breq	.-14     	; 0x1014 <__divsf3+0x14>
    1022:	55 23       	and	r21, r21
    1024:	b1 f3       	breq	.-20     	; 0x1012 <__divsf3+0x12>
    1026:	95 1b       	sub	r25, r21
    1028:	55 0b       	sbc	r21, r21
    102a:	bb 27       	eor	r27, r27
    102c:	aa 27       	eor	r26, r26
    102e:	62 17       	cp	r22, r18
    1030:	73 07       	cpc	r23, r19
    1032:	84 07       	cpc	r24, r20
    1034:	38 f0       	brcs	.+14     	; 0x1044 <__divsf3_pse+0x26>
    1036:	9f 5f       	subi	r25, 0xFF	; 255
    1038:	5f 4f       	sbci	r21, 0xFF	; 255
    103a:	22 0f       	add	r18, r18
    103c:	33 1f       	adc	r19, r19
    103e:	44 1f       	adc	r20, r20
    1040:	aa 1f       	adc	r26, r26
    1042:	a9 f3       	breq	.-22     	; 0x102e <__divsf3_pse+0x10>
    1044:	33 d0       	rcall	.+102    	; 0x10ac <__divsf3_pse+0x8e>
    1046:	0e 2e       	mov	r0, r30
    1048:	3a f0       	brmi	.+14     	; 0x1058 <__divsf3_pse+0x3a>
    104a:	e0 e8       	ldi	r30, 0x80	; 128
    104c:	30 d0       	rcall	.+96     	; 0x10ae <__divsf3_pse+0x90>
    104e:	91 50       	subi	r25, 0x01	; 1
    1050:	50 40       	sbci	r21, 0x00	; 0
    1052:	e6 95       	lsr	r30
    1054:	00 1c       	adc	r0, r0
    1056:	ca f7       	brpl	.-14     	; 0x104a <__divsf3_pse+0x2c>
    1058:	29 d0       	rcall	.+82     	; 0x10ac <__divsf3_pse+0x8e>
    105a:	fe 2f       	mov	r31, r30
    105c:	27 d0       	rcall	.+78     	; 0x10ac <__divsf3_pse+0x8e>
    105e:	66 0f       	add	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	88 1f       	adc	r24, r24
    1064:	bb 1f       	adc	r27, r27
    1066:	26 17       	cp	r18, r22
    1068:	37 07       	cpc	r19, r23
    106a:	48 07       	cpc	r20, r24
    106c:	ab 07       	cpc	r26, r27
    106e:	b0 e8       	ldi	r27, 0x80	; 128
    1070:	09 f0       	breq	.+2      	; 0x1074 <__divsf3_pse+0x56>
    1072:	bb 0b       	sbc	r27, r27
    1074:	80 2d       	mov	r24, r0
    1076:	bf 01       	movw	r22, r30
    1078:	ff 27       	eor	r31, r31
    107a:	93 58       	subi	r25, 0x83	; 131
    107c:	5f 4f       	sbci	r21, 0xFF	; 255
    107e:	2a f0       	brmi	.+10     	; 0x108a <__divsf3_pse+0x6c>
    1080:	9e 3f       	cpi	r25, 0xFE	; 254
    1082:	51 05       	cpc	r21, r1
    1084:	68 f0       	brcs	.+26     	; 0x10a0 <__divsf3_pse+0x82>
    1086:	61 c0       	rjmp	.+194    	; 0x114a <__fp_inf>
    1088:	ab c0       	rjmp	.+342    	; 0x11e0 <__fp_szero>
    108a:	5f 3f       	cpi	r21, 0xFF	; 255
    108c:	ec f3       	brlt	.-6      	; 0x1088 <__divsf3_pse+0x6a>
    108e:	98 3e       	cpi	r25, 0xE8	; 232
    1090:	dc f3       	brlt	.-10     	; 0x1088 <__divsf3_pse+0x6a>
    1092:	86 95       	lsr	r24
    1094:	77 95       	ror	r23
    1096:	67 95       	ror	r22
    1098:	b7 95       	ror	r27
    109a:	f7 95       	ror	r31
    109c:	9f 5f       	subi	r25, 0xFF	; 255
    109e:	c9 f7       	brne	.-14     	; 0x1092 <__divsf3_pse+0x74>
    10a0:	88 0f       	add	r24, r24
    10a2:	91 1d       	adc	r25, r1
    10a4:	96 95       	lsr	r25
    10a6:	87 95       	ror	r24
    10a8:	97 f9       	bld	r25, 7
    10aa:	08 95       	ret
    10ac:	e1 e0       	ldi	r30, 0x01	; 1
    10ae:	66 0f       	add	r22, r22
    10b0:	77 1f       	adc	r23, r23
    10b2:	88 1f       	adc	r24, r24
    10b4:	bb 1f       	adc	r27, r27
    10b6:	62 17       	cp	r22, r18
    10b8:	73 07       	cpc	r23, r19
    10ba:	84 07       	cpc	r24, r20
    10bc:	ba 07       	cpc	r27, r26
    10be:	20 f0       	brcs	.+8      	; 0x10c8 <__divsf3_pse+0xaa>
    10c0:	62 1b       	sub	r22, r18
    10c2:	73 0b       	sbc	r23, r19
    10c4:	84 0b       	sbc	r24, r20
    10c6:	ba 0b       	sbc	r27, r26
    10c8:	ee 1f       	adc	r30, r30
    10ca:	88 f7       	brcc	.-30     	; 0x10ae <__divsf3_pse+0x90>
    10cc:	e0 95       	com	r30
    10ce:	08 95       	ret

000010d0 <__floatunsisf>:
    10d0:	e8 94       	clt
    10d2:	09 c0       	rjmp	.+18     	; 0x10e6 <__floatsisf+0x12>

000010d4 <__floatsisf>:
    10d4:	97 fb       	bst	r25, 7
    10d6:	3e f4       	brtc	.+14     	; 0x10e6 <__floatsisf+0x12>
    10d8:	90 95       	com	r25
    10da:	80 95       	com	r24
    10dc:	70 95       	com	r23
    10de:	61 95       	neg	r22
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	8f 4f       	sbci	r24, 0xFF	; 255
    10e4:	9f 4f       	sbci	r25, 0xFF	; 255
    10e6:	99 23       	and	r25, r25
    10e8:	a9 f0       	breq	.+42     	; 0x1114 <__floatsisf+0x40>
    10ea:	f9 2f       	mov	r31, r25
    10ec:	96 e9       	ldi	r25, 0x96	; 150
    10ee:	bb 27       	eor	r27, r27
    10f0:	93 95       	inc	r25
    10f2:	f6 95       	lsr	r31
    10f4:	87 95       	ror	r24
    10f6:	77 95       	ror	r23
    10f8:	67 95       	ror	r22
    10fa:	b7 95       	ror	r27
    10fc:	f1 11       	cpse	r31, r1
    10fe:	f8 cf       	rjmp	.-16     	; 0x10f0 <__floatsisf+0x1c>
    1100:	fa f4       	brpl	.+62     	; 0x1140 <__floatsisf+0x6c>
    1102:	bb 0f       	add	r27, r27
    1104:	11 f4       	brne	.+4      	; 0x110a <__floatsisf+0x36>
    1106:	60 ff       	sbrs	r22, 0
    1108:	1b c0       	rjmp	.+54     	; 0x1140 <__floatsisf+0x6c>
    110a:	6f 5f       	subi	r22, 0xFF	; 255
    110c:	7f 4f       	sbci	r23, 0xFF	; 255
    110e:	8f 4f       	sbci	r24, 0xFF	; 255
    1110:	9f 4f       	sbci	r25, 0xFF	; 255
    1112:	16 c0       	rjmp	.+44     	; 0x1140 <__floatsisf+0x6c>
    1114:	88 23       	and	r24, r24
    1116:	11 f0       	breq	.+4      	; 0x111c <__floatsisf+0x48>
    1118:	96 e9       	ldi	r25, 0x96	; 150
    111a:	11 c0       	rjmp	.+34     	; 0x113e <__floatsisf+0x6a>
    111c:	77 23       	and	r23, r23
    111e:	21 f0       	breq	.+8      	; 0x1128 <__floatsisf+0x54>
    1120:	9e e8       	ldi	r25, 0x8E	; 142
    1122:	87 2f       	mov	r24, r23
    1124:	76 2f       	mov	r23, r22
    1126:	05 c0       	rjmp	.+10     	; 0x1132 <__floatsisf+0x5e>
    1128:	66 23       	and	r22, r22
    112a:	71 f0       	breq	.+28     	; 0x1148 <__floatsisf+0x74>
    112c:	96 e8       	ldi	r25, 0x86	; 134
    112e:	86 2f       	mov	r24, r22
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	2a f0       	brmi	.+10     	; 0x1140 <__floatsisf+0x6c>
    1136:	9a 95       	dec	r25
    1138:	66 0f       	add	r22, r22
    113a:	77 1f       	adc	r23, r23
    113c:	88 1f       	adc	r24, r24
    113e:	da f7       	brpl	.-10     	; 0x1136 <__floatsisf+0x62>
    1140:	88 0f       	add	r24, r24
    1142:	96 95       	lsr	r25
    1144:	87 95       	ror	r24
    1146:	97 f9       	bld	r25, 7
    1148:	08 95       	ret

0000114a <__fp_inf>:
    114a:	97 f9       	bld	r25, 7
    114c:	9f 67       	ori	r25, 0x7F	; 127
    114e:	80 e8       	ldi	r24, 0x80	; 128
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	08 95       	ret

00001156 <__fp_nan>:
    1156:	9f ef       	ldi	r25, 0xFF	; 255
    1158:	80 ec       	ldi	r24, 0xC0	; 192
    115a:	08 95       	ret

0000115c <__fp_pscA>:
    115c:	00 24       	eor	r0, r0
    115e:	0a 94       	dec	r0
    1160:	16 16       	cp	r1, r22
    1162:	17 06       	cpc	r1, r23
    1164:	18 06       	cpc	r1, r24
    1166:	09 06       	cpc	r0, r25
    1168:	08 95       	ret

0000116a <__fp_pscB>:
    116a:	00 24       	eor	r0, r0
    116c:	0a 94       	dec	r0
    116e:	12 16       	cp	r1, r18
    1170:	13 06       	cpc	r1, r19
    1172:	14 06       	cpc	r1, r20
    1174:	05 06       	cpc	r0, r21
    1176:	08 95       	ret

00001178 <__fp_round>:
    1178:	09 2e       	mov	r0, r25
    117a:	03 94       	inc	r0
    117c:	00 0c       	add	r0, r0
    117e:	11 f4       	brne	.+4      	; 0x1184 <__fp_round+0xc>
    1180:	88 23       	and	r24, r24
    1182:	52 f0       	brmi	.+20     	; 0x1198 <__fp_round+0x20>
    1184:	bb 0f       	add	r27, r27
    1186:	40 f4       	brcc	.+16     	; 0x1198 <__fp_round+0x20>
    1188:	bf 2b       	or	r27, r31
    118a:	11 f4       	brne	.+4      	; 0x1190 <__fp_round+0x18>
    118c:	60 ff       	sbrs	r22, 0
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <__fp_round+0x20>
    1190:	6f 5f       	subi	r22, 0xFF	; 255
    1192:	7f 4f       	sbci	r23, 0xFF	; 255
    1194:	8f 4f       	sbci	r24, 0xFF	; 255
    1196:	9f 4f       	sbci	r25, 0xFF	; 255
    1198:	08 95       	ret

0000119a <__fp_split3>:
    119a:	57 fd       	sbrc	r21, 7
    119c:	90 58       	subi	r25, 0x80	; 128
    119e:	44 0f       	add	r20, r20
    11a0:	55 1f       	adc	r21, r21
    11a2:	59 f0       	breq	.+22     	; 0x11ba <__fp_splitA+0x10>
    11a4:	5f 3f       	cpi	r21, 0xFF	; 255
    11a6:	71 f0       	breq	.+28     	; 0x11c4 <__fp_splitA+0x1a>
    11a8:	47 95       	ror	r20

000011aa <__fp_splitA>:
    11aa:	88 0f       	add	r24, r24
    11ac:	97 fb       	bst	r25, 7
    11ae:	99 1f       	adc	r25, r25
    11b0:	61 f0       	breq	.+24     	; 0x11ca <__fp_splitA+0x20>
    11b2:	9f 3f       	cpi	r25, 0xFF	; 255
    11b4:	79 f0       	breq	.+30     	; 0x11d4 <__fp_splitA+0x2a>
    11b6:	87 95       	ror	r24
    11b8:	08 95       	ret
    11ba:	12 16       	cp	r1, r18
    11bc:	13 06       	cpc	r1, r19
    11be:	14 06       	cpc	r1, r20
    11c0:	55 1f       	adc	r21, r21
    11c2:	f2 cf       	rjmp	.-28     	; 0x11a8 <__fp_split3+0xe>
    11c4:	46 95       	lsr	r20
    11c6:	f1 df       	rcall	.-30     	; 0x11aa <__fp_splitA>
    11c8:	08 c0       	rjmp	.+16     	; 0x11da <__fp_splitA+0x30>
    11ca:	16 16       	cp	r1, r22
    11cc:	17 06       	cpc	r1, r23
    11ce:	18 06       	cpc	r1, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	f1 cf       	rjmp	.-30     	; 0x11b6 <__fp_splitA+0xc>
    11d4:	86 95       	lsr	r24
    11d6:	71 05       	cpc	r23, r1
    11d8:	61 05       	cpc	r22, r1
    11da:	08 94       	sec
    11dc:	08 95       	ret

000011de <__fp_zero>:
    11de:	e8 94       	clt

000011e0 <__fp_szero>:
    11e0:	bb 27       	eor	r27, r27
    11e2:	66 27       	eor	r22, r22
    11e4:	77 27       	eor	r23, r23
    11e6:	cb 01       	movw	r24, r22
    11e8:	97 f9       	bld	r25, 7
    11ea:	08 95       	ret

000011ec <__mulsf3>:
    11ec:	0b d0       	rcall	.+22     	; 0x1204 <__mulsf3x>
    11ee:	c4 cf       	rjmp	.-120    	; 0x1178 <__fp_round>
    11f0:	b5 df       	rcall	.-150    	; 0x115c <__fp_pscA>
    11f2:	28 f0       	brcs	.+10     	; 0x11fe <__mulsf3+0x12>
    11f4:	ba df       	rcall	.-140    	; 0x116a <__fp_pscB>
    11f6:	18 f0       	brcs	.+6      	; 0x11fe <__mulsf3+0x12>
    11f8:	95 23       	and	r25, r21
    11fa:	09 f0       	breq	.+2      	; 0x11fe <__mulsf3+0x12>
    11fc:	a6 cf       	rjmp	.-180    	; 0x114a <__fp_inf>
    11fe:	ab cf       	rjmp	.-170    	; 0x1156 <__fp_nan>
    1200:	11 24       	eor	r1, r1
    1202:	ee cf       	rjmp	.-36     	; 0x11e0 <__fp_szero>

00001204 <__mulsf3x>:
    1204:	ca df       	rcall	.-108    	; 0x119a <__fp_split3>
    1206:	a0 f3       	brcs	.-24     	; 0x11f0 <__mulsf3+0x4>

00001208 <__mulsf3_pse>:
    1208:	95 9f       	mul	r25, r21
    120a:	d1 f3       	breq	.-12     	; 0x1200 <__mulsf3+0x14>
    120c:	95 0f       	add	r25, r21
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	55 1f       	adc	r21, r21
    1212:	62 9f       	mul	r22, r18
    1214:	f0 01       	movw	r30, r0
    1216:	72 9f       	mul	r23, r18
    1218:	bb 27       	eor	r27, r27
    121a:	f0 0d       	add	r31, r0
    121c:	b1 1d       	adc	r27, r1
    121e:	63 9f       	mul	r22, r19
    1220:	aa 27       	eor	r26, r26
    1222:	f0 0d       	add	r31, r0
    1224:	b1 1d       	adc	r27, r1
    1226:	aa 1f       	adc	r26, r26
    1228:	64 9f       	mul	r22, r20
    122a:	66 27       	eor	r22, r22
    122c:	b0 0d       	add	r27, r0
    122e:	a1 1d       	adc	r26, r1
    1230:	66 1f       	adc	r22, r22
    1232:	82 9f       	mul	r24, r18
    1234:	22 27       	eor	r18, r18
    1236:	b0 0d       	add	r27, r0
    1238:	a1 1d       	adc	r26, r1
    123a:	62 1f       	adc	r22, r18
    123c:	73 9f       	mul	r23, r19
    123e:	b0 0d       	add	r27, r0
    1240:	a1 1d       	adc	r26, r1
    1242:	62 1f       	adc	r22, r18
    1244:	83 9f       	mul	r24, r19
    1246:	a0 0d       	add	r26, r0
    1248:	61 1d       	adc	r22, r1
    124a:	22 1f       	adc	r18, r18
    124c:	74 9f       	mul	r23, r20
    124e:	33 27       	eor	r19, r19
    1250:	a0 0d       	add	r26, r0
    1252:	61 1d       	adc	r22, r1
    1254:	23 1f       	adc	r18, r19
    1256:	84 9f       	mul	r24, r20
    1258:	60 0d       	add	r22, r0
    125a:	21 1d       	adc	r18, r1
    125c:	82 2f       	mov	r24, r18
    125e:	76 2f       	mov	r23, r22
    1260:	6a 2f       	mov	r22, r26
    1262:	11 24       	eor	r1, r1
    1264:	9f 57       	subi	r25, 0x7F	; 127
    1266:	50 40       	sbci	r21, 0x00	; 0
    1268:	8a f0       	brmi	.+34     	; 0x128c <__mulsf3_pse+0x84>
    126a:	e1 f0       	breq	.+56     	; 0x12a4 <__mulsf3_pse+0x9c>
    126c:	88 23       	and	r24, r24
    126e:	4a f0       	brmi	.+18     	; 0x1282 <__mulsf3_pse+0x7a>
    1270:	ee 0f       	add	r30, r30
    1272:	ff 1f       	adc	r31, r31
    1274:	bb 1f       	adc	r27, r27
    1276:	66 1f       	adc	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	91 50       	subi	r25, 0x01	; 1
    127e:	50 40       	sbci	r21, 0x00	; 0
    1280:	a9 f7       	brne	.-22     	; 0x126c <__mulsf3_pse+0x64>
    1282:	9e 3f       	cpi	r25, 0xFE	; 254
    1284:	51 05       	cpc	r21, r1
    1286:	70 f0       	brcs	.+28     	; 0x12a4 <__mulsf3_pse+0x9c>
    1288:	60 cf       	rjmp	.-320    	; 0x114a <__fp_inf>
    128a:	aa cf       	rjmp	.-172    	; 0x11e0 <__fp_szero>
    128c:	5f 3f       	cpi	r21, 0xFF	; 255
    128e:	ec f3       	brlt	.-6      	; 0x128a <__mulsf3_pse+0x82>
    1290:	98 3e       	cpi	r25, 0xE8	; 232
    1292:	dc f3       	brlt	.-10     	; 0x128a <__mulsf3_pse+0x82>
    1294:	86 95       	lsr	r24
    1296:	77 95       	ror	r23
    1298:	67 95       	ror	r22
    129a:	b7 95       	ror	r27
    129c:	f7 95       	ror	r31
    129e:	e7 95       	ror	r30
    12a0:	9f 5f       	subi	r25, 0xFF	; 255
    12a2:	c1 f7       	brne	.-16     	; 0x1294 <__mulsf3_pse+0x8c>
    12a4:	fe 2b       	or	r31, r30
    12a6:	88 0f       	add	r24, r24
    12a8:	91 1d       	adc	r25, r1
    12aa:	96 95       	lsr	r25
    12ac:	87 95       	ror	r24
    12ae:	97 f9       	bld	r25, 7
    12b0:	08 95       	ret

000012b2 <vfprintf>:
    12b2:	2f 92       	push	r2
    12b4:	3f 92       	push	r3
    12b6:	4f 92       	push	r4
    12b8:	5f 92       	push	r5
    12ba:	6f 92       	push	r6
    12bc:	7f 92       	push	r7
    12be:	8f 92       	push	r8
    12c0:	9f 92       	push	r9
    12c2:	af 92       	push	r10
    12c4:	bf 92       	push	r11
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	61 97       	sbiw	r28, 0x11	; 17
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	3c 01       	movw	r6, r24
    12e2:	6e 87       	std	Y+14, r22	; 0x0e
    12e4:	7f 87       	std	Y+15, r23	; 0x0f
    12e6:	6a 01       	movw	r12, r20
    12e8:	fc 01       	movw	r30, r24
    12ea:	16 82       	std	Z+6, r1	; 0x06
    12ec:	17 82       	std	Z+7, r1	; 0x07
    12ee:	83 81       	ldd	r24, Z+3	; 0x03
    12f0:	81 fd       	sbrc	r24, 1
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <vfprintf+0x48>
    12f4:	6f ef       	ldi	r22, 0xFF	; 255
    12f6:	7f ef       	ldi	r23, 0xFF	; 255
    12f8:	6f c3       	rjmp	.+1758   	; 0x19d8 <vfprintf+0x726>
    12fa:	9e 01       	movw	r18, r28
    12fc:	2f 5f       	subi	r18, 0xFF	; 255
    12fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1300:	28 8b       	std	Y+16, r18	; 0x10
    1302:	39 8b       	std	Y+17, r19	; 0x11
    1304:	f3 01       	movw	r30, r6
    1306:	23 81       	ldd	r18, Z+3	; 0x03
    1308:	ee 85       	ldd	r30, Y+14	; 0x0e
    130a:	ff 85       	ldd	r31, Y+15	; 0x0f
    130c:	23 fd       	sbrc	r18, 3
    130e:	85 91       	lpm	r24, Z+
    1310:	23 ff       	sbrs	r18, 3
    1312:	81 91       	ld	r24, Z+
    1314:	ee 87       	std	Y+14, r30	; 0x0e
    1316:	ff 87       	std	Y+15, r31	; 0x0f
    1318:	88 23       	and	r24, r24
    131a:	09 f4       	brne	.+2      	; 0x131e <vfprintf+0x6c>
    131c:	5a c3       	rjmp	.+1716   	; 0x19d2 <vfprintf+0x720>
    131e:	85 32       	cpi	r24, 0x25	; 37
    1320:	51 f4       	brne	.+20     	; 0x1336 <vfprintf+0x84>
    1322:	ee 85       	ldd	r30, Y+14	; 0x0e
    1324:	ff 85       	ldd	r31, Y+15	; 0x0f
    1326:	23 fd       	sbrc	r18, 3
    1328:	85 91       	lpm	r24, Z+
    132a:	23 ff       	sbrs	r18, 3
    132c:	81 91       	ld	r24, Z+
    132e:	ee 87       	std	Y+14, r30	; 0x0e
    1330:	ff 87       	std	Y+15, r31	; 0x0f
    1332:	85 32       	cpi	r24, 0x25	; 37
    1334:	29 f4       	brne	.+10     	; 0x1340 <vfprintf+0x8e>
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	b3 01       	movw	r22, r6
    133a:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    133e:	e2 cf       	rjmp	.-60     	; 0x1304 <vfprintf+0x52>
    1340:	98 2f       	mov	r25, r24
    1342:	10 e0       	ldi	r17, 0x00	; 0
    1344:	88 24       	eor	r8, r8
    1346:	99 24       	eor	r9, r9
    1348:	10 32       	cpi	r17, 0x20	; 32
    134a:	b0 f4       	brcc	.+44     	; 0x1378 <vfprintf+0xc6>
    134c:	9b 32       	cpi	r25, 0x2B	; 43
    134e:	69 f0       	breq	.+26     	; 0x136a <vfprintf+0xb8>
    1350:	9c 32       	cpi	r25, 0x2C	; 44
    1352:	28 f4       	brcc	.+10     	; 0x135e <vfprintf+0xac>
    1354:	90 32       	cpi	r25, 0x20	; 32
    1356:	51 f0       	breq	.+20     	; 0x136c <vfprintf+0xba>
    1358:	93 32       	cpi	r25, 0x23	; 35
    135a:	71 f4       	brne	.+28     	; 0x1378 <vfprintf+0xc6>
    135c:	0b c0       	rjmp	.+22     	; 0x1374 <vfprintf+0xc2>
    135e:	9d 32       	cpi	r25, 0x2D	; 45
    1360:	39 f0       	breq	.+14     	; 0x1370 <vfprintf+0xbe>
    1362:	90 33       	cpi	r25, 0x30	; 48
    1364:	49 f4       	brne	.+18     	; 0x1378 <vfprintf+0xc6>
    1366:	11 60       	ori	r17, 0x01	; 1
    1368:	28 c0       	rjmp	.+80     	; 0x13ba <vfprintf+0x108>
    136a:	12 60       	ori	r17, 0x02	; 2
    136c:	14 60       	ori	r17, 0x04	; 4
    136e:	25 c0       	rjmp	.+74     	; 0x13ba <vfprintf+0x108>
    1370:	18 60       	ori	r17, 0x08	; 8
    1372:	23 c0       	rjmp	.+70     	; 0x13ba <vfprintf+0x108>
    1374:	10 61       	ori	r17, 0x10	; 16
    1376:	21 c0       	rjmp	.+66     	; 0x13ba <vfprintf+0x108>
    1378:	17 fd       	sbrc	r17, 7
    137a:	2a c0       	rjmp	.+84     	; 0x13d0 <vfprintf+0x11e>
    137c:	89 2f       	mov	r24, r25
    137e:	80 53       	subi	r24, 0x30	; 48
    1380:	8a 30       	cpi	r24, 0x0A	; 10
    1382:	78 f4       	brcc	.+30     	; 0x13a2 <vfprintf+0xf0>
    1384:	16 ff       	sbrs	r17, 6
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <vfprintf+0xe2>
    1388:	fa e0       	ldi	r31, 0x0A	; 10
    138a:	9f 9e       	mul	r9, r31
    138c:	90 2c       	mov	r9, r0
    138e:	11 24       	eor	r1, r1
    1390:	98 0e       	add	r9, r24
    1392:	13 c0       	rjmp	.+38     	; 0x13ba <vfprintf+0x108>
    1394:	3a e0       	ldi	r19, 0x0A	; 10
    1396:	83 9e       	mul	r8, r19
    1398:	80 2c       	mov	r8, r0
    139a:	11 24       	eor	r1, r1
    139c:	88 0e       	add	r8, r24
    139e:	10 62       	ori	r17, 0x20	; 32
    13a0:	0c c0       	rjmp	.+24     	; 0x13ba <vfprintf+0x108>
    13a2:	9e 32       	cpi	r25, 0x2E	; 46
    13a4:	21 f4       	brne	.+8      	; 0x13ae <vfprintf+0xfc>
    13a6:	16 fd       	sbrc	r17, 6
    13a8:	14 c3       	rjmp	.+1576   	; 0x19d2 <vfprintf+0x720>
    13aa:	10 64       	ori	r17, 0x40	; 64
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <vfprintf+0x108>
    13ae:	9c 36       	cpi	r25, 0x6C	; 108
    13b0:	11 f4       	brne	.+4      	; 0x13b6 <vfprintf+0x104>
    13b2:	10 68       	ori	r17, 0x80	; 128
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <vfprintf+0x108>
    13b6:	98 36       	cpi	r25, 0x68	; 104
    13b8:	59 f4       	brne	.+22     	; 0x13d0 <vfprintf+0x11e>
    13ba:	ee 85       	ldd	r30, Y+14	; 0x0e
    13bc:	ff 85       	ldd	r31, Y+15	; 0x0f
    13be:	23 fd       	sbrc	r18, 3
    13c0:	95 91       	lpm	r25, Z+
    13c2:	23 ff       	sbrs	r18, 3
    13c4:	91 91       	ld	r25, Z+
    13c6:	ee 87       	std	Y+14, r30	; 0x0e
    13c8:	ff 87       	std	Y+15, r31	; 0x0f
    13ca:	99 23       	and	r25, r25
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <vfprintf+0x11e>
    13ce:	bc cf       	rjmp	.-136    	; 0x1348 <vfprintf+0x96>
    13d0:	89 2f       	mov	r24, r25
    13d2:	85 54       	subi	r24, 0x45	; 69
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	20 f4       	brcc	.+8      	; 0x13e0 <vfprintf+0x12e>
    13d8:	81 2f       	mov	r24, r17
    13da:	80 61       	ori	r24, 0x10	; 16
    13dc:	90 5e       	subi	r25, 0xE0	; 224
    13de:	07 c0       	rjmp	.+14     	; 0x13ee <vfprintf+0x13c>
    13e0:	89 2f       	mov	r24, r25
    13e2:	85 56       	subi	r24, 0x65	; 101
    13e4:	83 30       	cpi	r24, 0x03	; 3
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <vfprintf+0x138>
    13e8:	9f c1       	rjmp	.+830    	; 0x1728 <vfprintf+0x476>
    13ea:	81 2f       	mov	r24, r17
    13ec:	8f 7e       	andi	r24, 0xEF	; 239
    13ee:	86 fd       	sbrc	r24, 6
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <vfprintf+0x144>
    13f2:	76 e0       	ldi	r23, 0x06	; 6
    13f4:	97 2e       	mov	r9, r23
    13f6:	6f e3       	ldi	r22, 0x3F	; 63
    13f8:	f6 2e       	mov	r15, r22
    13fa:	f8 22       	and	r15, r24
    13fc:	95 36       	cpi	r25, 0x65	; 101
    13fe:	19 f4       	brne	.+6      	; 0x1406 <vfprintf+0x154>
    1400:	f0 e4       	ldi	r31, 0x40	; 64
    1402:	ff 2a       	or	r15, r31
    1404:	07 c0       	rjmp	.+14     	; 0x1414 <vfprintf+0x162>
    1406:	96 36       	cpi	r25, 0x66	; 102
    1408:	19 f4       	brne	.+6      	; 0x1410 <vfprintf+0x15e>
    140a:	20 e8       	ldi	r18, 0x80	; 128
    140c:	f2 2a       	or	r15, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <vfprintf+0x162>
    1410:	91 10       	cpse	r9, r1
    1412:	9a 94       	dec	r9
    1414:	f7 fe       	sbrs	r15, 7
    1416:	0a c0       	rjmp	.+20     	; 0x142c <vfprintf+0x17a>
    1418:	3b e3       	ldi	r19, 0x3B	; 59
    141a:	39 15       	cp	r19, r9
    141c:	18 f4       	brcc	.+6      	; 0x1424 <vfprintf+0x172>
    141e:	5c e3       	ldi	r21, 0x3C	; 60
    1420:	b5 2e       	mov	r11, r21
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <vfprintf+0x176>
    1424:	b9 2c       	mov	r11, r9
    1426:	b3 94       	inc	r11
    1428:	27 e0       	ldi	r18, 0x07	; 7
    142a:	09 c0       	rjmp	.+18     	; 0x143e <vfprintf+0x18c>
    142c:	47 e0       	ldi	r20, 0x07	; 7
    142e:	49 15       	cp	r20, r9
    1430:	20 f4       	brcc	.+8      	; 0x143a <vfprintf+0x188>
    1432:	bb 24       	eor	r11, r11
    1434:	47 e0       	ldi	r20, 0x07	; 7
    1436:	94 2e       	mov	r9, r20
    1438:	f7 cf       	rjmp	.-18     	; 0x1428 <vfprintf+0x176>
    143a:	29 2d       	mov	r18, r9
    143c:	bb 24       	eor	r11, r11
    143e:	c6 01       	movw	r24, r12
    1440:	04 96       	adiw	r24, 0x04	; 4
    1442:	8c 87       	std	Y+12, r24	; 0x0c
    1444:	9d 87       	std	Y+13, r25	; 0x0d
    1446:	f6 01       	movw	r30, r12
    1448:	60 81       	ld	r22, Z
    144a:	71 81       	ldd	r23, Z+1	; 0x01
    144c:	82 81       	ldd	r24, Z+2	; 0x02
    144e:	93 81       	ldd	r25, Z+3	; 0x03
    1450:	ae 01       	movw	r20, r28
    1452:	4f 5f       	subi	r20, 0xFF	; 255
    1454:	5f 4f       	sbci	r21, 0xFF	; 255
    1456:	0b 2d       	mov	r16, r11
    1458:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <__ftoa_engine>
    145c:	6c 01       	movw	r12, r24
    145e:	09 81       	ldd	r16, Y+1	; 0x01
    1460:	20 2e       	mov	r2, r16
    1462:	33 24       	eor	r3, r3
    1464:	00 ff       	sbrs	r16, 0
    1466:	04 c0       	rjmp	.+8      	; 0x1470 <vfprintf+0x1be>
    1468:	03 fd       	sbrc	r16, 3
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <vfprintf+0x1be>
    146c:	1d e2       	ldi	r17, 0x2D	; 45
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <vfprintf+0x1d0>
    1470:	f1 fe       	sbrs	r15, 1
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <vfprintf+0x1c6>
    1474:	1b e2       	ldi	r17, 0x2B	; 43
    1476:	05 c0       	rjmp	.+10     	; 0x1482 <vfprintf+0x1d0>
    1478:	f2 fc       	sbrc	r15, 2
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <vfprintf+0x1ce>
    147c:	10 e0       	ldi	r17, 0x00	; 0
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <vfprintf+0x1d0>
    1480:	10 e2       	ldi	r17, 0x20	; 32
    1482:	c1 01       	movw	r24, r2
    1484:	8c 70       	andi	r24, 0x0C	; 12
    1486:	90 70       	andi	r25, 0x00	; 0
    1488:	89 2b       	or	r24, r25
    148a:	b9 f1       	breq	.+110    	; 0x14fa <vfprintf+0x248>
    148c:	11 23       	and	r17, r17
    148e:	11 f4       	brne	.+4      	; 0x1494 <vfprintf+0x1e2>
    1490:	83 e0       	ldi	r24, 0x03	; 3
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <vfprintf+0x1e4>
    1494:	84 e0       	ldi	r24, 0x04	; 4
    1496:	88 15       	cp	r24, r8
    1498:	10 f0       	brcs	.+4      	; 0x149e <vfprintf+0x1ec>
    149a:	88 24       	eor	r8, r8
    149c:	0a c0       	rjmp	.+20     	; 0x14b2 <vfprintf+0x200>
    149e:	88 1a       	sub	r8, r24
    14a0:	f3 fc       	sbrc	r15, 3
    14a2:	07 c0       	rjmp	.+14     	; 0x14b2 <vfprintf+0x200>
    14a4:	80 e2       	ldi	r24, 0x20	; 32
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	b3 01       	movw	r22, r6
    14aa:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    14ae:	8a 94       	dec	r8
    14b0:	c9 f7       	brne	.-14     	; 0x14a4 <vfprintf+0x1f2>
    14b2:	11 23       	and	r17, r17
    14b4:	29 f0       	breq	.+10     	; 0x14c0 <vfprintf+0x20e>
    14b6:	81 2f       	mov	r24, r17
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	b3 01       	movw	r22, r6
    14bc:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    14c0:	23 fe       	sbrs	r2, 3
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <vfprintf+0x218>
    14c4:	08 ec       	ldi	r16, 0xC8	; 200
    14c6:	11 e0       	ldi	r17, 0x01	; 1
    14c8:	0e c0       	rjmp	.+28     	; 0x14e6 <vfprintf+0x234>
    14ca:	0c ec       	ldi	r16, 0xCC	; 204
    14cc:	11 e0       	ldi	r17, 0x01	; 1
    14ce:	0b c0       	rjmp	.+22     	; 0x14e6 <vfprintf+0x234>
    14d0:	e1 14       	cp	r14, r1
    14d2:	f1 04       	cpc	r15, r1
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <vfprintf+0x226>
    14d6:	80 52       	subi	r24, 0x20	; 32
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	b3 01       	movw	r22, r6
    14dc:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    14e0:	0f 5f       	subi	r16, 0xFF	; 255
    14e2:	1f 4f       	sbci	r17, 0xFF	; 255
    14e4:	05 c0       	rjmp	.+10     	; 0x14f0 <vfprintf+0x23e>
    14e6:	ef 2c       	mov	r14, r15
    14e8:	ff 24       	eor	r15, r15
    14ea:	f0 e1       	ldi	r31, 0x10	; 16
    14ec:	ef 22       	and	r14, r31
    14ee:	ff 24       	eor	r15, r15
    14f0:	f8 01       	movw	r30, r16
    14f2:	84 91       	lpm	r24, Z+
    14f4:	88 23       	and	r24, r24
    14f6:	61 f7       	brne	.-40     	; 0x14d0 <vfprintf+0x21e>
    14f8:	14 c1       	rjmp	.+552    	; 0x1722 <vfprintf+0x470>
    14fa:	f7 fe       	sbrs	r15, 7
    14fc:	12 c0       	rjmp	.+36     	; 0x1522 <vfprintf+0x270>
    14fe:	bc 0c       	add	r11, r12
    1500:	24 fe       	sbrs	r2, 4
    1502:	04 c0       	rjmp	.+8      	; 0x150c <vfprintf+0x25a>
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	81 33       	cpi	r24, 0x31	; 49
    1508:	09 f4       	brne	.+2      	; 0x150c <vfprintf+0x25a>
    150a:	ba 94       	dec	r11
    150c:	1b 14       	cp	r1, r11
    150e:	1c f0       	brlt	.+6      	; 0x1516 <vfprintf+0x264>
    1510:	bb 24       	eor	r11, r11
    1512:	b3 94       	inc	r11
    1514:	2d c0       	rjmp	.+90     	; 0x1570 <vfprintf+0x2be>
    1516:	f8 e0       	ldi	r31, 0x08	; 8
    1518:	fb 15       	cp	r31, r11
    151a:	50 f5       	brcc	.+84     	; 0x1570 <vfprintf+0x2be>
    151c:	38 e0       	ldi	r19, 0x08	; 8
    151e:	b3 2e       	mov	r11, r19
    1520:	27 c0       	rjmp	.+78     	; 0x1570 <vfprintf+0x2be>
    1522:	f6 fc       	sbrc	r15, 6
    1524:	25 c0       	rjmp	.+74     	; 0x1570 <vfprintf+0x2be>
    1526:	89 2d       	mov	r24, r9
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	8c 15       	cp	r24, r12
    152c:	9d 05       	cpc	r25, r13
    152e:	4c f0       	brlt	.+18     	; 0x1542 <vfprintf+0x290>
    1530:	2c ef       	ldi	r18, 0xFC	; 252
    1532:	c2 16       	cp	r12, r18
    1534:	2f ef       	ldi	r18, 0xFF	; 255
    1536:	d2 06       	cpc	r13, r18
    1538:	24 f0       	brlt	.+8      	; 0x1542 <vfprintf+0x290>
    153a:	30 e8       	ldi	r19, 0x80	; 128
    153c:	f3 2a       	or	r15, r19
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <vfprintf+0x290>
    1540:	9a 94       	dec	r9
    1542:	99 20       	and	r9, r9
    1544:	49 f0       	breq	.+18     	; 0x1558 <vfprintf+0x2a6>
    1546:	e2 e0       	ldi	r30, 0x02	; 2
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	ec 0f       	add	r30, r28
    154c:	fd 1f       	adc	r31, r29
    154e:	e9 0d       	add	r30, r9
    1550:	f1 1d       	adc	r31, r1
    1552:	80 81       	ld	r24, Z
    1554:	80 33       	cpi	r24, 0x30	; 48
    1556:	a1 f3       	breq	.-24     	; 0x1540 <vfprintf+0x28e>
    1558:	f7 fe       	sbrs	r15, 7
    155a:	0a c0       	rjmp	.+20     	; 0x1570 <vfprintf+0x2be>
    155c:	b9 2c       	mov	r11, r9
    155e:	b3 94       	inc	r11
    1560:	89 2d       	mov	r24, r9
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	c8 16       	cp	r12, r24
    1566:	d9 06       	cpc	r13, r25
    1568:	14 f0       	brlt	.+4      	; 0x156e <vfprintf+0x2bc>
    156a:	99 24       	eor	r9, r9
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <vfprintf+0x2be>
    156e:	9c 18       	sub	r9, r12
    1570:	f7 fc       	sbrc	r15, 7
    1572:	03 c0       	rjmp	.+6      	; 0x157a <vfprintf+0x2c8>
    1574:	25 e0       	ldi	r18, 0x05	; 5
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	09 c0       	rjmp	.+18     	; 0x158c <vfprintf+0x2da>
    157a:	1c 14       	cp	r1, r12
    157c:	1d 04       	cpc	r1, r13
    157e:	1c f0       	brlt	.+6      	; 0x1586 <vfprintf+0x2d4>
    1580:	21 e0       	ldi	r18, 0x01	; 1
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	03 c0       	rjmp	.+6      	; 0x158c <vfprintf+0x2da>
    1586:	96 01       	movw	r18, r12
    1588:	2f 5f       	subi	r18, 0xFF	; 255
    158a:	3f 4f       	sbci	r19, 0xFF	; 255
    158c:	11 23       	and	r17, r17
    158e:	11 f0       	breq	.+4      	; 0x1594 <vfprintf+0x2e2>
    1590:	2f 5f       	subi	r18, 0xFF	; 255
    1592:	3f 4f       	sbci	r19, 0xFF	; 255
    1594:	99 20       	and	r9, r9
    1596:	29 f0       	breq	.+10     	; 0x15a2 <vfprintf+0x2f0>
    1598:	89 2d       	mov	r24, r9
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	01 96       	adiw	r24, 0x01	; 1
    159e:	28 0f       	add	r18, r24
    15a0:	39 1f       	adc	r19, r25
    15a2:	88 2d       	mov	r24, r8
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	28 17       	cp	r18, r24
    15a8:	39 07       	cpc	r19, r25
    15aa:	14 f0       	brlt	.+4      	; 0x15b0 <vfprintf+0x2fe>
    15ac:	88 24       	eor	r8, r8
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <vfprintf+0x300>
    15b0:	82 1a       	sub	r8, r18
    15b2:	4f 2c       	mov	r4, r15
    15b4:	55 24       	eor	r5, r5
    15b6:	c2 01       	movw	r24, r4
    15b8:	89 70       	andi	r24, 0x09	; 9
    15ba:	90 70       	andi	r25, 0x00	; 0
    15bc:	89 2b       	or	r24, r25
    15be:	39 f0       	breq	.+14     	; 0x15ce <vfprintf+0x31c>
    15c0:	08 c0       	rjmp	.+16     	; 0x15d2 <vfprintf+0x320>
    15c2:	80 e2       	ldi	r24, 0x20	; 32
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	b3 01       	movw	r22, r6
    15c8:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    15cc:	8a 94       	dec	r8
    15ce:	88 20       	and	r8, r8
    15d0:	c1 f7       	brne	.-16     	; 0x15c2 <vfprintf+0x310>
    15d2:	11 23       	and	r17, r17
    15d4:	29 f0       	breq	.+10     	; 0x15e0 <vfprintf+0x32e>
    15d6:	81 2f       	mov	r24, r17
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	b3 01       	movw	r22, r6
    15dc:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    15e0:	43 fe       	sbrs	r4, 3
    15e2:	07 c0       	rjmp	.+14     	; 0x15f2 <vfprintf+0x340>
    15e4:	08 c0       	rjmp	.+16     	; 0x15f6 <vfprintf+0x344>
    15e6:	80 e3       	ldi	r24, 0x30	; 48
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	b3 01       	movw	r22, r6
    15ec:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    15f0:	8a 94       	dec	r8
    15f2:	88 20       	and	r8, r8
    15f4:	c1 f7       	brne	.-16     	; 0x15e6 <vfprintf+0x334>
    15f6:	f7 fe       	sbrs	r15, 7
    15f8:	46 c0       	rjmp	.+140    	; 0x1686 <vfprintf+0x3d4>
    15fa:	86 01       	movw	r16, r12
    15fc:	d7 fe       	sbrs	r13, 7
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <vfprintf+0x352>
    1600:	00 e0       	ldi	r16, 0x00	; 0
    1602:	10 e0       	ldi	r17, 0x00	; 0
    1604:	76 01       	movw	r14, r12
    1606:	08 94       	sec
    1608:	e1 1c       	adc	r14, r1
    160a:	f1 1c       	adc	r15, r1
    160c:	e0 1a       	sub	r14, r16
    160e:	f1 0a       	sbc	r15, r17
    1610:	41 e0       	ldi	r20, 0x01	; 1
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	4c 0f       	add	r20, r28
    1616:	5d 1f       	adc	r21, r29
    1618:	e4 0e       	add	r14, r20
    161a:	f5 1e       	adc	r15, r21
    161c:	26 01       	movw	r4, r12
    161e:	4b 18       	sub	r4, r11
    1620:	51 08       	sbc	r5, r1
    1622:	89 2d       	mov	r24, r9
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	aa 24       	eor	r10, r10
    1628:	bb 24       	eor	r11, r11
    162a:	a8 1a       	sub	r10, r24
    162c:	b9 0a       	sbc	r11, r25
    162e:	5f ef       	ldi	r21, 0xFF	; 255
    1630:	0f 3f       	cpi	r16, 0xFF	; 255
    1632:	15 07       	cpc	r17, r21
    1634:	29 f4       	brne	.+10     	; 0x1640 <vfprintf+0x38e>
    1636:	8e e2       	ldi	r24, 0x2E	; 46
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	b3 01       	movw	r22, r6
    163c:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    1640:	c0 16       	cp	r12, r16
    1642:	d1 06       	cpc	r13, r17
    1644:	34 f0       	brlt	.+12     	; 0x1652 <vfprintf+0x3a0>
    1646:	40 16       	cp	r4, r16
    1648:	51 06       	cpc	r5, r17
    164a:	1c f4       	brge	.+6      	; 0x1652 <vfprintf+0x3a0>
    164c:	f7 01       	movw	r30, r14
    164e:	80 81       	ld	r24, Z
    1650:	01 c0       	rjmp	.+2      	; 0x1654 <vfprintf+0x3a2>
    1652:	80 e3       	ldi	r24, 0x30	; 48
    1654:	01 50       	subi	r16, 0x01	; 1
    1656:	10 40       	sbci	r17, 0x00	; 0
    1658:	08 94       	sec
    165a:	e1 1c       	adc	r14, r1
    165c:	f1 1c       	adc	r15, r1
    165e:	0a 15       	cp	r16, r10
    1660:	1b 05       	cpc	r17, r11
    1662:	2c f0       	brlt	.+10     	; 0x166e <vfprintf+0x3bc>
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	b3 01       	movw	r22, r6
    1668:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    166c:	e0 cf       	rjmp	.-64     	; 0x162e <vfprintf+0x37c>
    166e:	0c 15       	cp	r16, r12
    1670:	1d 05       	cpc	r17, r13
    1672:	39 f4       	brne	.+14     	; 0x1682 <vfprintf+0x3d0>
    1674:	9a 81       	ldd	r25, Y+2	; 0x02
    1676:	96 33       	cpi	r25, 0x36	; 54
    1678:	18 f4       	brcc	.+6      	; 0x1680 <vfprintf+0x3ce>
    167a:	95 33       	cpi	r25, 0x35	; 53
    167c:	11 f4       	brne	.+4      	; 0x1682 <vfprintf+0x3d0>
    167e:	24 fe       	sbrs	r2, 4
    1680:	81 e3       	ldi	r24, 0x31	; 49
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	4b c0       	rjmp	.+150    	; 0x171c <vfprintf+0x46a>
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	81 33       	cpi	r24, 0x31	; 49
    168a:	09 f0       	breq	.+2      	; 0x168e <vfprintf+0x3dc>
    168c:	0f 7e       	andi	r16, 0xEF	; 239
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	b3 01       	movw	r22, r6
    1692:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    1696:	99 20       	and	r9, r9
    1698:	a1 f0       	breq	.+40     	; 0x16c2 <vfprintf+0x410>
    169a:	8e e2       	ldi	r24, 0x2E	; 46
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	b3 01       	movw	r22, r6
    16a0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    16a4:	12 e0       	ldi	r17, 0x02	; 2
    16a6:	e1 e0       	ldi	r30, 0x01	; 1
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	ec 0f       	add	r30, r28
    16ac:	fd 1f       	adc	r31, r29
    16ae:	e1 0f       	add	r30, r17
    16b0:	f1 1d       	adc	r31, r1
    16b2:	1f 5f       	subi	r17, 0xFF	; 255
    16b4:	80 81       	ld	r24, Z
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	b3 01       	movw	r22, r6
    16ba:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    16be:	9a 94       	dec	r9
    16c0:	91 f7       	brne	.-28     	; 0x16a6 <vfprintf+0x3f4>
    16c2:	44 fc       	sbrc	r4, 4
    16c4:	03 c0       	rjmp	.+6      	; 0x16cc <vfprintf+0x41a>
    16c6:	85 e6       	ldi	r24, 0x65	; 101
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <vfprintf+0x41e>
    16cc:	85 e4       	ldi	r24, 0x45	; 69
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	b3 01       	movw	r22, r6
    16d2:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    16d6:	d7 fc       	sbrc	r13, 7
    16d8:	05 c0       	rjmp	.+10     	; 0x16e4 <vfprintf+0x432>
    16da:	c1 14       	cp	r12, r1
    16dc:	d1 04       	cpc	r13, r1
    16de:	41 f4       	brne	.+16     	; 0x16f0 <vfprintf+0x43e>
    16e0:	04 ff       	sbrs	r16, 4
    16e2:	06 c0       	rjmp	.+12     	; 0x16f0 <vfprintf+0x43e>
    16e4:	d0 94       	com	r13
    16e6:	c1 94       	neg	r12
    16e8:	d1 08       	sbc	r13, r1
    16ea:	d3 94       	inc	r13
    16ec:	8d e2       	ldi	r24, 0x2D	; 45
    16ee:	01 c0       	rjmp	.+2      	; 0x16f2 <vfprintf+0x440>
    16f0:	8b e2       	ldi	r24, 0x2B	; 43
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	b3 01       	movw	r22, r6
    16f6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    16fa:	80 e3       	ldi	r24, 0x30	; 48
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <vfprintf+0x456>
    16fe:	8f 5f       	subi	r24, 0xFF	; 255
    1700:	26 ef       	ldi	r18, 0xF6	; 246
    1702:	3f ef       	ldi	r19, 0xFF	; 255
    1704:	c2 0e       	add	r12, r18
    1706:	d3 1e       	adc	r13, r19
    1708:	3a e0       	ldi	r19, 0x0A	; 10
    170a:	c3 16       	cp	r12, r19
    170c:	d1 04       	cpc	r13, r1
    170e:	bc f7       	brge	.-18     	; 0x16fe <vfprintf+0x44c>
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	b3 01       	movw	r22, r6
    1714:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    1718:	c6 01       	movw	r24, r12
    171a:	c0 96       	adiw	r24, 0x30	; 48
    171c:	b3 01       	movw	r22, r6
    171e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    1722:	cc 84       	ldd	r12, Y+12	; 0x0c
    1724:	dd 84       	ldd	r13, Y+13	; 0x0d
    1726:	52 c1       	rjmp	.+676    	; 0x19cc <vfprintf+0x71a>
    1728:	93 36       	cpi	r25, 0x63	; 99
    172a:	31 f0       	breq	.+12     	; 0x1738 <vfprintf+0x486>
    172c:	93 37       	cpi	r25, 0x73	; 115
    172e:	99 f0       	breq	.+38     	; 0x1756 <vfprintf+0x4a4>
    1730:	93 35       	cpi	r25, 0x53	; 83
    1732:	09 f0       	breq	.+2      	; 0x1736 <vfprintf+0x484>
    1734:	59 c0       	rjmp	.+178    	; 0x17e8 <vfprintf+0x536>
    1736:	23 c0       	rjmp	.+70     	; 0x177e <vfprintf+0x4cc>
    1738:	f6 01       	movw	r30, r12
    173a:	80 81       	ld	r24, Z
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	5e 01       	movw	r10, r28
    1740:	08 94       	sec
    1742:	a1 1c       	adc	r10, r1
    1744:	b1 1c       	adc	r11, r1
    1746:	22 e0       	ldi	r18, 0x02	; 2
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	c2 0e       	add	r12, r18
    174c:	d3 1e       	adc	r13, r19
    174e:	21 e0       	ldi	r18, 0x01	; 1
    1750:	e2 2e       	mov	r14, r18
    1752:	f1 2c       	mov	r15, r1
    1754:	12 c0       	rjmp	.+36     	; 0x177a <vfprintf+0x4c8>
    1756:	f6 01       	movw	r30, r12
    1758:	a0 80       	ld	r10, Z
    175a:	b1 80       	ldd	r11, Z+1	; 0x01
    175c:	16 fd       	sbrc	r17, 6
    175e:	03 c0       	rjmp	.+6      	; 0x1766 <vfprintf+0x4b4>
    1760:	6f ef       	ldi	r22, 0xFF	; 255
    1762:	7f ef       	ldi	r23, 0xFF	; 255
    1764:	02 c0       	rjmp	.+4      	; 0x176a <vfprintf+0x4b8>
    1766:	69 2d       	mov	r22, r9
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	22 e0       	ldi	r18, 0x02	; 2
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	c2 0e       	add	r12, r18
    1770:	d3 1e       	adc	r13, r19
    1772:	c5 01       	movw	r24, r10
    1774:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <strnlen>
    1778:	7c 01       	movw	r14, r24
    177a:	1f 77       	andi	r17, 0x7F	; 127
    177c:	13 c0       	rjmp	.+38     	; 0x17a4 <vfprintf+0x4f2>
    177e:	f6 01       	movw	r30, r12
    1780:	a0 80       	ld	r10, Z
    1782:	b1 80       	ldd	r11, Z+1	; 0x01
    1784:	16 fd       	sbrc	r17, 6
    1786:	03 c0       	rjmp	.+6      	; 0x178e <vfprintf+0x4dc>
    1788:	6f ef       	ldi	r22, 0xFF	; 255
    178a:	7f ef       	ldi	r23, 0xFF	; 255
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <vfprintf+0x4e0>
    178e:	69 2d       	mov	r22, r9
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	22 e0       	ldi	r18, 0x02	; 2
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	c2 0e       	add	r12, r18
    1798:	d3 1e       	adc	r13, r19
    179a:	c5 01       	movw	r24, r10
    179c:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <strnlen_P>
    17a0:	7c 01       	movw	r14, r24
    17a2:	10 68       	ori	r17, 0x80	; 128
    17a4:	13 ff       	sbrs	r17, 3
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <vfprintf+0x504>
    17a8:	1b c0       	rjmp	.+54     	; 0x17e0 <vfprintf+0x52e>
    17aa:	80 e2       	ldi	r24, 0x20	; 32
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	b3 01       	movw	r22, r6
    17b0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    17b4:	8a 94       	dec	r8
    17b6:	88 2d       	mov	r24, r8
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	e8 16       	cp	r14, r24
    17bc:	f9 06       	cpc	r15, r25
    17be:	a8 f3       	brcs	.-22     	; 0x17aa <vfprintf+0x4f8>
    17c0:	0f c0       	rjmp	.+30     	; 0x17e0 <vfprintf+0x52e>
    17c2:	f5 01       	movw	r30, r10
    17c4:	17 fd       	sbrc	r17, 7
    17c6:	85 91       	lpm	r24, Z+
    17c8:	17 ff       	sbrs	r17, 7
    17ca:	81 91       	ld	r24, Z+
    17cc:	5f 01       	movw	r10, r30
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	b3 01       	movw	r22, r6
    17d2:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    17d6:	81 10       	cpse	r8, r1
    17d8:	8a 94       	dec	r8
    17da:	08 94       	sec
    17dc:	e1 08       	sbc	r14, r1
    17de:	f1 08       	sbc	r15, r1
    17e0:	e1 14       	cp	r14, r1
    17e2:	f1 04       	cpc	r15, r1
    17e4:	71 f7       	brne	.-36     	; 0x17c2 <vfprintf+0x510>
    17e6:	f2 c0       	rjmp	.+484    	; 0x19cc <vfprintf+0x71a>
    17e8:	94 36       	cpi	r25, 0x64	; 100
    17ea:	11 f0       	breq	.+4      	; 0x17f0 <vfprintf+0x53e>
    17ec:	99 36       	cpi	r25, 0x69	; 105
    17ee:	89 f5       	brne	.+98     	; 0x1852 <vfprintf+0x5a0>
    17f0:	17 ff       	sbrs	r17, 7
    17f2:	08 c0       	rjmp	.+16     	; 0x1804 <vfprintf+0x552>
    17f4:	f6 01       	movw	r30, r12
    17f6:	20 81       	ld	r18, Z
    17f8:	31 81       	ldd	r19, Z+1	; 0x01
    17fa:	42 81       	ldd	r20, Z+2	; 0x02
    17fc:	53 81       	ldd	r21, Z+3	; 0x03
    17fe:	84 e0       	ldi	r24, 0x04	; 4
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0a c0       	rjmp	.+20     	; 0x1818 <vfprintf+0x566>
    1804:	f6 01       	movw	r30, r12
    1806:	80 81       	ld	r24, Z
    1808:	91 81       	ldd	r25, Z+1	; 0x01
    180a:	9c 01       	movw	r18, r24
    180c:	44 27       	eor	r20, r20
    180e:	37 fd       	sbrc	r19, 7
    1810:	40 95       	com	r20
    1812:	54 2f       	mov	r21, r20
    1814:	82 e0       	ldi	r24, 0x02	; 2
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	c8 0e       	add	r12, r24
    181a:	d9 1e       	adc	r13, r25
    181c:	9f e6       	ldi	r25, 0x6F	; 111
    181e:	f9 2e       	mov	r15, r25
    1820:	f1 22       	and	r15, r17
    1822:	57 ff       	sbrs	r21, 7
    1824:	09 c0       	rjmp	.+18     	; 0x1838 <vfprintf+0x586>
    1826:	50 95       	com	r21
    1828:	40 95       	com	r20
    182a:	30 95       	com	r19
    182c:	21 95       	neg	r18
    182e:	3f 4f       	sbci	r19, 0xFF	; 255
    1830:	4f 4f       	sbci	r20, 0xFF	; 255
    1832:	5f 4f       	sbci	r21, 0xFF	; 255
    1834:	90 e8       	ldi	r25, 0x80	; 128
    1836:	f9 2a       	or	r15, r25
    1838:	ca 01       	movw	r24, r20
    183a:	b9 01       	movw	r22, r18
    183c:	ae 01       	movw	r20, r28
    183e:	4f 5f       	subi	r20, 0xFF	; 255
    1840:	5f 4f       	sbci	r21, 0xFF	; 255
    1842:	2a e0       	ldi	r18, 0x0A	; 10
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__ultoa_invert>
    184a:	e8 2e       	mov	r14, r24
    184c:	e8 89       	ldd	r30, Y+16	; 0x10
    184e:	ee 1a       	sub	r14, r30
    1850:	41 c0       	rjmp	.+130    	; 0x18d4 <vfprintf+0x622>
    1852:	95 37       	cpi	r25, 0x75	; 117
    1854:	21 f4       	brne	.+8      	; 0x185e <vfprintf+0x5ac>
    1856:	1f 7e       	andi	r17, 0xEF	; 239
    1858:	2a e0       	ldi	r18, 0x0A	; 10
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	1c c0       	rjmp	.+56     	; 0x1896 <vfprintf+0x5e4>
    185e:	19 7f       	andi	r17, 0xF9	; 249
    1860:	9f 36       	cpi	r25, 0x6F	; 111
    1862:	61 f0       	breq	.+24     	; 0x187c <vfprintf+0x5ca>
    1864:	90 37       	cpi	r25, 0x70	; 112
    1866:	20 f4       	brcc	.+8      	; 0x1870 <vfprintf+0x5be>
    1868:	98 35       	cpi	r25, 0x58	; 88
    186a:	09 f0       	breq	.+2      	; 0x186e <vfprintf+0x5bc>
    186c:	b2 c0       	rjmp	.+356    	; 0x19d2 <vfprintf+0x720>
    186e:	0f c0       	rjmp	.+30     	; 0x188e <vfprintf+0x5dc>
    1870:	90 37       	cpi	r25, 0x70	; 112
    1872:	39 f0       	breq	.+14     	; 0x1882 <vfprintf+0x5d0>
    1874:	98 37       	cpi	r25, 0x78	; 120
    1876:	09 f0       	breq	.+2      	; 0x187a <vfprintf+0x5c8>
    1878:	ac c0       	rjmp	.+344    	; 0x19d2 <vfprintf+0x720>
    187a:	04 c0       	rjmp	.+8      	; 0x1884 <vfprintf+0x5d2>
    187c:	28 e0       	ldi	r18, 0x08	; 8
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	0a c0       	rjmp	.+20     	; 0x1896 <vfprintf+0x5e4>
    1882:	10 61       	ori	r17, 0x10	; 16
    1884:	14 fd       	sbrc	r17, 4
    1886:	14 60       	ori	r17, 0x04	; 4
    1888:	20 e1       	ldi	r18, 0x10	; 16
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <vfprintf+0x5e4>
    188e:	14 fd       	sbrc	r17, 4
    1890:	16 60       	ori	r17, 0x06	; 6
    1892:	20 e1       	ldi	r18, 0x10	; 16
    1894:	32 e0       	ldi	r19, 0x02	; 2
    1896:	17 ff       	sbrs	r17, 7
    1898:	08 c0       	rjmp	.+16     	; 0x18aa <vfprintf+0x5f8>
    189a:	f6 01       	movw	r30, r12
    189c:	60 81       	ld	r22, Z
    189e:	71 81       	ldd	r23, Z+1	; 0x01
    18a0:	82 81       	ldd	r24, Z+2	; 0x02
    18a2:	93 81       	ldd	r25, Z+3	; 0x03
    18a4:	44 e0       	ldi	r20, 0x04	; 4
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	08 c0       	rjmp	.+16     	; 0x18ba <vfprintf+0x608>
    18aa:	f6 01       	movw	r30, r12
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	bc 01       	movw	r22, r24
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	42 e0       	ldi	r20, 0x02	; 2
    18b8:	50 e0       	ldi	r21, 0x00	; 0
    18ba:	c4 0e       	add	r12, r20
    18bc:	d5 1e       	adc	r13, r21
    18be:	ae 01       	movw	r20, r28
    18c0:	4f 5f       	subi	r20, 0xFF	; 255
    18c2:	5f 4f       	sbci	r21, 0xFF	; 255
    18c4:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__ultoa_invert>
    18c8:	e8 2e       	mov	r14, r24
    18ca:	58 89       	ldd	r21, Y+16	; 0x10
    18cc:	e5 1a       	sub	r14, r21
    18ce:	8f e7       	ldi	r24, 0x7F	; 127
    18d0:	f8 2e       	mov	r15, r24
    18d2:	f1 22       	and	r15, r17
    18d4:	f6 fe       	sbrs	r15, 6
    18d6:	0b c0       	rjmp	.+22     	; 0x18ee <vfprintf+0x63c>
    18d8:	8e ef       	ldi	r24, 0xFE	; 254
    18da:	f8 22       	and	r15, r24
    18dc:	e9 14       	cp	r14, r9
    18de:	38 f4       	brcc	.+14     	; 0x18ee <vfprintf+0x63c>
    18e0:	f4 fe       	sbrs	r15, 4
    18e2:	07 c0       	rjmp	.+14     	; 0x18f2 <vfprintf+0x640>
    18e4:	f2 fc       	sbrc	r15, 2
    18e6:	05 c0       	rjmp	.+10     	; 0x18f2 <vfprintf+0x640>
    18e8:	9f ee       	ldi	r25, 0xEF	; 239
    18ea:	f9 22       	and	r15, r25
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <vfprintf+0x640>
    18ee:	1e 2d       	mov	r17, r14
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <vfprintf+0x642>
    18f2:	19 2d       	mov	r17, r9
    18f4:	f4 fe       	sbrs	r15, 4
    18f6:	0d c0       	rjmp	.+26     	; 0x1912 <vfprintf+0x660>
    18f8:	fe 01       	movw	r30, r28
    18fa:	ee 0d       	add	r30, r14
    18fc:	f1 1d       	adc	r31, r1
    18fe:	80 81       	ld	r24, Z
    1900:	80 33       	cpi	r24, 0x30	; 48
    1902:	19 f4       	brne	.+6      	; 0x190a <vfprintf+0x658>
    1904:	e9 ee       	ldi	r30, 0xE9	; 233
    1906:	fe 22       	and	r15, r30
    1908:	08 c0       	rjmp	.+16     	; 0x191a <vfprintf+0x668>
    190a:	1f 5f       	subi	r17, 0xFF	; 255
    190c:	f2 fe       	sbrs	r15, 2
    190e:	05 c0       	rjmp	.+10     	; 0x191a <vfprintf+0x668>
    1910:	03 c0       	rjmp	.+6      	; 0x1918 <vfprintf+0x666>
    1912:	8f 2d       	mov	r24, r15
    1914:	86 78       	andi	r24, 0x86	; 134
    1916:	09 f0       	breq	.+2      	; 0x191a <vfprintf+0x668>
    1918:	1f 5f       	subi	r17, 0xFF	; 255
    191a:	0f 2d       	mov	r16, r15
    191c:	f3 fc       	sbrc	r15, 3
    191e:	14 c0       	rjmp	.+40     	; 0x1948 <vfprintf+0x696>
    1920:	f0 fe       	sbrs	r15, 0
    1922:	0f c0       	rjmp	.+30     	; 0x1942 <vfprintf+0x690>
    1924:	18 15       	cp	r17, r8
    1926:	10 f0       	brcs	.+4      	; 0x192c <vfprintf+0x67a>
    1928:	9e 2c       	mov	r9, r14
    192a:	0b c0       	rjmp	.+22     	; 0x1942 <vfprintf+0x690>
    192c:	9e 2c       	mov	r9, r14
    192e:	98 0c       	add	r9, r8
    1930:	91 1a       	sub	r9, r17
    1932:	18 2d       	mov	r17, r8
    1934:	06 c0       	rjmp	.+12     	; 0x1942 <vfprintf+0x690>
    1936:	80 e2       	ldi	r24, 0x20	; 32
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	b3 01       	movw	r22, r6
    193c:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    1940:	1f 5f       	subi	r17, 0xFF	; 255
    1942:	18 15       	cp	r17, r8
    1944:	c0 f3       	brcs	.-16     	; 0x1936 <vfprintf+0x684>
    1946:	04 c0       	rjmp	.+8      	; 0x1950 <vfprintf+0x69e>
    1948:	18 15       	cp	r17, r8
    194a:	10 f4       	brcc	.+4      	; 0x1950 <vfprintf+0x69e>
    194c:	81 1a       	sub	r8, r17
    194e:	01 c0       	rjmp	.+2      	; 0x1952 <vfprintf+0x6a0>
    1950:	88 24       	eor	r8, r8
    1952:	04 ff       	sbrs	r16, 4
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <vfprintf+0x6c2>
    1956:	80 e3       	ldi	r24, 0x30	; 48
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	b3 01       	movw	r22, r6
    195c:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    1960:	02 ff       	sbrs	r16, 2
    1962:	1d c0       	rjmp	.+58     	; 0x199e <vfprintf+0x6ec>
    1964:	01 fd       	sbrc	r16, 1
    1966:	03 c0       	rjmp	.+6      	; 0x196e <vfprintf+0x6bc>
    1968:	88 e7       	ldi	r24, 0x78	; 120
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	0e c0       	rjmp	.+28     	; 0x198a <vfprintf+0x6d8>
    196e:	88 e5       	ldi	r24, 0x58	; 88
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0b c0       	rjmp	.+22     	; 0x198a <vfprintf+0x6d8>
    1974:	80 2f       	mov	r24, r16
    1976:	86 78       	andi	r24, 0x86	; 134
    1978:	91 f0       	breq	.+36     	; 0x199e <vfprintf+0x6ec>
    197a:	01 ff       	sbrs	r16, 1
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <vfprintf+0x6d0>
    197e:	8b e2       	ldi	r24, 0x2B	; 43
    1980:	01 c0       	rjmp	.+2      	; 0x1984 <vfprintf+0x6d2>
    1982:	80 e2       	ldi	r24, 0x20	; 32
    1984:	f7 fc       	sbrc	r15, 7
    1986:	8d e2       	ldi	r24, 0x2D	; 45
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	b3 01       	movw	r22, r6
    198c:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    1990:	06 c0       	rjmp	.+12     	; 0x199e <vfprintf+0x6ec>
    1992:	80 e3       	ldi	r24, 0x30	; 48
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	b3 01       	movw	r22, r6
    1998:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    199c:	9a 94       	dec	r9
    199e:	e9 14       	cp	r14, r9
    19a0:	c0 f3       	brcs	.-16     	; 0x1992 <vfprintf+0x6e0>
    19a2:	ea 94       	dec	r14
    19a4:	e1 e0       	ldi	r30, 0x01	; 1
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	ec 0f       	add	r30, r28
    19aa:	fd 1f       	adc	r31, r29
    19ac:	ee 0d       	add	r30, r14
    19ae:	f1 1d       	adc	r31, r1
    19b0:	80 81       	ld	r24, Z
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	b3 01       	movw	r22, r6
    19b6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    19ba:	ee 20       	and	r14, r14
    19bc:	91 f7       	brne	.-28     	; 0x19a2 <vfprintf+0x6f0>
    19be:	06 c0       	rjmp	.+12     	; 0x19cc <vfprintf+0x71a>
    19c0:	80 e2       	ldi	r24, 0x20	; 32
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	b3 01       	movw	r22, r6
    19c6:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <fputc>
    19ca:	8a 94       	dec	r8
    19cc:	88 20       	and	r8, r8
    19ce:	c1 f7       	brne	.-16     	; 0x19c0 <vfprintf+0x70e>
    19d0:	99 cc       	rjmp	.-1742   	; 0x1304 <vfprintf+0x52>
    19d2:	f3 01       	movw	r30, r6
    19d4:	66 81       	ldd	r22, Z+6	; 0x06
    19d6:	77 81       	ldd	r23, Z+7	; 0x07
    19d8:	cb 01       	movw	r24, r22
    19da:	61 96       	adiw	r28, 0x11	; 17
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	bf 90       	pop	r11
    19f2:	af 90       	pop	r10
    19f4:	9f 90       	pop	r9
    19f6:	8f 90       	pop	r8
    19f8:	7f 90       	pop	r7
    19fa:	6f 90       	pop	r6
    19fc:	5f 90       	pop	r5
    19fe:	4f 90       	pop	r4
    1a00:	3f 90       	pop	r3
    1a02:	2f 90       	pop	r2
    1a04:	08 95       	ret

00001a06 <__ftoa_engine>:
    1a06:	28 30       	cpi	r18, 0x08	; 8
    1a08:	08 f0       	brcs	.+2      	; 0x1a0c <__ftoa_engine+0x6>
    1a0a:	27 e0       	ldi	r18, 0x07	; 7
    1a0c:	33 27       	eor	r19, r19
    1a0e:	da 01       	movw	r26, r20
    1a10:	99 0f       	add	r25, r25
    1a12:	31 1d       	adc	r19, r1
    1a14:	87 fd       	sbrc	r24, 7
    1a16:	91 60       	ori	r25, 0x01	; 1
    1a18:	00 96       	adiw	r24, 0x00	; 0
    1a1a:	61 05       	cpc	r22, r1
    1a1c:	71 05       	cpc	r23, r1
    1a1e:	39 f4       	brne	.+14     	; 0x1a2e <__ftoa_engine+0x28>
    1a20:	32 60       	ori	r19, 0x02	; 2
    1a22:	2e 5f       	subi	r18, 0xFE	; 254
    1a24:	3d 93       	st	X+, r19
    1a26:	30 e3       	ldi	r19, 0x30	; 48
    1a28:	2a 95       	dec	r18
    1a2a:	e1 f7       	brne	.-8      	; 0x1a24 <__ftoa_engine+0x1e>
    1a2c:	08 95       	ret
    1a2e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a30:	30 f0       	brcs	.+12     	; 0x1a3e <__ftoa_engine+0x38>
    1a32:	80 38       	cpi	r24, 0x80	; 128
    1a34:	71 05       	cpc	r23, r1
    1a36:	61 05       	cpc	r22, r1
    1a38:	09 f0       	breq	.+2      	; 0x1a3c <__ftoa_engine+0x36>
    1a3a:	3c 5f       	subi	r19, 0xFC	; 252
    1a3c:	3c 5f       	subi	r19, 0xFC	; 252
    1a3e:	3d 93       	st	X+, r19
    1a40:	91 30       	cpi	r25, 0x01	; 1
    1a42:	08 f0       	brcs	.+2      	; 0x1a46 <__ftoa_engine+0x40>
    1a44:	80 68       	ori	r24, 0x80	; 128
    1a46:	91 1d       	adc	r25, r1
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	1f 93       	push	r17
    1a4e:	0f 93       	push	r16
    1a50:	ff 92       	push	r15
    1a52:	ef 92       	push	r14
    1a54:	19 2f       	mov	r17, r25
    1a56:	98 7f       	andi	r25, 0xF8	; 248
    1a58:	96 95       	lsr	r25
    1a5a:	e9 2f       	mov	r30, r25
    1a5c:	96 95       	lsr	r25
    1a5e:	96 95       	lsr	r25
    1a60:	e9 0f       	add	r30, r25
    1a62:	ff 27       	eor	r31, r31
    1a64:	e6 5d       	subi	r30, 0xD6	; 214
    1a66:	fd 4f       	sbci	r31, 0xFD	; 253
    1a68:	99 27       	eor	r25, r25
    1a6a:	33 27       	eor	r19, r19
    1a6c:	ee 24       	eor	r14, r14
    1a6e:	ff 24       	eor	r15, r15
    1a70:	a7 01       	movw	r20, r14
    1a72:	e7 01       	movw	r28, r14
    1a74:	05 90       	lpm	r0, Z+
    1a76:	08 94       	sec
    1a78:	07 94       	ror	r0
    1a7a:	28 f4       	brcc	.+10     	; 0x1a86 <__ftoa_engine+0x80>
    1a7c:	36 0f       	add	r19, r22
    1a7e:	e7 1e       	adc	r14, r23
    1a80:	f8 1e       	adc	r15, r24
    1a82:	49 1f       	adc	r20, r25
    1a84:	51 1d       	adc	r21, r1
    1a86:	66 0f       	add	r22, r22
    1a88:	77 1f       	adc	r23, r23
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	06 94       	lsr	r0
    1a90:	a1 f7       	brne	.-24     	; 0x1a7a <__ftoa_engine+0x74>
    1a92:	05 90       	lpm	r0, Z+
    1a94:	07 94       	ror	r0
    1a96:	28 f4       	brcc	.+10     	; 0x1aa2 <__ftoa_engine+0x9c>
    1a98:	e7 0e       	add	r14, r23
    1a9a:	f8 1e       	adc	r15, r24
    1a9c:	49 1f       	adc	r20, r25
    1a9e:	56 1f       	adc	r21, r22
    1aa0:	c1 1d       	adc	r28, r1
    1aa2:	77 0f       	add	r23, r23
    1aa4:	88 1f       	adc	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	66 1f       	adc	r22, r22
    1aaa:	06 94       	lsr	r0
    1aac:	a1 f7       	brne	.-24     	; 0x1a96 <__ftoa_engine+0x90>
    1aae:	05 90       	lpm	r0, Z+
    1ab0:	07 94       	ror	r0
    1ab2:	28 f4       	brcc	.+10     	; 0x1abe <__ftoa_engine+0xb8>
    1ab4:	f8 0e       	add	r15, r24
    1ab6:	49 1f       	adc	r20, r25
    1ab8:	56 1f       	adc	r21, r22
    1aba:	c7 1f       	adc	r28, r23
    1abc:	d1 1d       	adc	r29, r1
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	66 1f       	adc	r22, r22
    1ac4:	77 1f       	adc	r23, r23
    1ac6:	06 94       	lsr	r0
    1ac8:	a1 f7       	brne	.-24     	; 0x1ab2 <__ftoa_engine+0xac>
    1aca:	05 90       	lpm	r0, Z+
    1acc:	07 94       	ror	r0
    1ace:	20 f4       	brcc	.+8      	; 0x1ad8 <__ftoa_engine+0xd2>
    1ad0:	49 0f       	add	r20, r25
    1ad2:	56 1f       	adc	r21, r22
    1ad4:	c7 1f       	adc	r28, r23
    1ad6:	d8 1f       	adc	r29, r24
    1ad8:	99 0f       	add	r25, r25
    1ada:	66 1f       	adc	r22, r22
    1adc:	77 1f       	adc	r23, r23
    1ade:	88 1f       	adc	r24, r24
    1ae0:	06 94       	lsr	r0
    1ae2:	a9 f7       	brne	.-22     	; 0x1ace <__ftoa_engine+0xc8>
    1ae4:	84 91       	lpm	r24, Z+
    1ae6:	10 95       	com	r17
    1ae8:	17 70       	andi	r17, 0x07	; 7
    1aea:	41 f0       	breq	.+16     	; 0x1afc <__ftoa_engine+0xf6>
    1aec:	d6 95       	lsr	r29
    1aee:	c7 95       	ror	r28
    1af0:	57 95       	ror	r21
    1af2:	47 95       	ror	r20
    1af4:	f7 94       	ror	r15
    1af6:	e7 94       	ror	r14
    1af8:	1a 95       	dec	r17
    1afa:	c1 f7       	brne	.-16     	; 0x1aec <__ftoa_engine+0xe6>
    1afc:	e0 ed       	ldi	r30, 0xD0	; 208
    1afe:	f1 e0       	ldi	r31, 0x01	; 1
    1b00:	68 94       	set
    1b02:	15 90       	lpm	r1, Z+
    1b04:	15 91       	lpm	r17, Z+
    1b06:	35 91       	lpm	r19, Z+
    1b08:	65 91       	lpm	r22, Z+
    1b0a:	95 91       	lpm	r25, Z+
    1b0c:	05 90       	lpm	r0, Z+
    1b0e:	7f e2       	ldi	r23, 0x2F	; 47
    1b10:	73 95       	inc	r23
    1b12:	e1 18       	sub	r14, r1
    1b14:	f1 0a       	sbc	r15, r17
    1b16:	43 0b       	sbc	r20, r19
    1b18:	56 0b       	sbc	r21, r22
    1b1a:	c9 0b       	sbc	r28, r25
    1b1c:	d0 09       	sbc	r29, r0
    1b1e:	c0 f7       	brcc	.-16     	; 0x1b10 <__ftoa_engine+0x10a>
    1b20:	e1 0c       	add	r14, r1
    1b22:	f1 1e       	adc	r15, r17
    1b24:	43 1f       	adc	r20, r19
    1b26:	56 1f       	adc	r21, r22
    1b28:	c9 1f       	adc	r28, r25
    1b2a:	d0 1d       	adc	r29, r0
    1b2c:	7e f4       	brtc	.+30     	; 0x1b4c <__ftoa_engine+0x146>
    1b2e:	70 33       	cpi	r23, 0x30	; 48
    1b30:	11 f4       	brne	.+4      	; 0x1b36 <__ftoa_engine+0x130>
    1b32:	8a 95       	dec	r24
    1b34:	e6 cf       	rjmp	.-52     	; 0x1b02 <__ftoa_engine+0xfc>
    1b36:	e8 94       	clt
    1b38:	01 50       	subi	r16, 0x01	; 1
    1b3a:	30 f0       	brcs	.+12     	; 0x1b48 <__ftoa_engine+0x142>
    1b3c:	08 0f       	add	r16, r24
    1b3e:	0a f4       	brpl	.+2      	; 0x1b42 <__ftoa_engine+0x13c>
    1b40:	00 27       	eor	r16, r16
    1b42:	02 17       	cp	r16, r18
    1b44:	08 f4       	brcc	.+2      	; 0x1b48 <__ftoa_engine+0x142>
    1b46:	20 2f       	mov	r18, r16
    1b48:	23 95       	inc	r18
    1b4a:	02 2f       	mov	r16, r18
    1b4c:	7a 33       	cpi	r23, 0x3A	; 58
    1b4e:	28 f0       	brcs	.+10     	; 0x1b5a <__ftoa_engine+0x154>
    1b50:	79 e3       	ldi	r23, 0x39	; 57
    1b52:	7d 93       	st	X+, r23
    1b54:	2a 95       	dec	r18
    1b56:	e9 f7       	brne	.-6      	; 0x1b52 <__ftoa_engine+0x14c>
    1b58:	10 c0       	rjmp	.+32     	; 0x1b7a <__ftoa_engine+0x174>
    1b5a:	7d 93       	st	X+, r23
    1b5c:	2a 95       	dec	r18
    1b5e:	89 f6       	brne	.-94     	; 0x1b02 <__ftoa_engine+0xfc>
    1b60:	06 94       	lsr	r0
    1b62:	97 95       	ror	r25
    1b64:	67 95       	ror	r22
    1b66:	37 95       	ror	r19
    1b68:	17 95       	ror	r17
    1b6a:	17 94       	ror	r1
    1b6c:	e1 18       	sub	r14, r1
    1b6e:	f1 0a       	sbc	r15, r17
    1b70:	43 0b       	sbc	r20, r19
    1b72:	56 0b       	sbc	r21, r22
    1b74:	c9 0b       	sbc	r28, r25
    1b76:	d0 09       	sbc	r29, r0
    1b78:	98 f0       	brcs	.+38     	; 0x1ba0 <__ftoa_engine+0x19a>
    1b7a:	23 95       	inc	r18
    1b7c:	7e 91       	ld	r23, -X
    1b7e:	73 95       	inc	r23
    1b80:	7a 33       	cpi	r23, 0x3A	; 58
    1b82:	08 f0       	brcs	.+2      	; 0x1b86 <__ftoa_engine+0x180>
    1b84:	70 e3       	ldi	r23, 0x30	; 48
    1b86:	7c 93       	st	X, r23
    1b88:	20 13       	cpse	r18, r16
    1b8a:	b8 f7       	brcc	.-18     	; 0x1b7a <__ftoa_engine+0x174>
    1b8c:	7e 91       	ld	r23, -X
    1b8e:	70 61       	ori	r23, 0x10	; 16
    1b90:	7d 93       	st	X+, r23
    1b92:	30 f0       	brcs	.+12     	; 0x1ba0 <__ftoa_engine+0x19a>
    1b94:	83 95       	inc	r24
    1b96:	71 e3       	ldi	r23, 0x31	; 49
    1b98:	7d 93       	st	X+, r23
    1b9a:	70 e3       	ldi	r23, 0x30	; 48
    1b9c:	2a 95       	dec	r18
    1b9e:	e1 f7       	brne	.-8      	; 0x1b98 <__ftoa_engine+0x192>
    1ba0:	11 24       	eor	r1, r1
    1ba2:	ef 90       	pop	r14
    1ba4:	ff 90       	pop	r15
    1ba6:	0f 91       	pop	r16
    1ba8:	1f 91       	pop	r17
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	99 27       	eor	r25, r25
    1bb0:	87 fd       	sbrc	r24, 7
    1bb2:	90 95       	com	r25
    1bb4:	08 95       	ret

00001bb6 <strnlen_P>:
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	05 90       	lpm	r0, Z+
    1bba:	61 50       	subi	r22, 0x01	; 1
    1bbc:	70 40       	sbci	r23, 0x00	; 0
    1bbe:	01 10       	cpse	r0, r1
    1bc0:	d8 f7       	brcc	.-10     	; 0x1bb8 <strnlen_P+0x2>
    1bc2:	80 95       	com	r24
    1bc4:	90 95       	com	r25
    1bc6:	8e 0f       	add	r24, r30
    1bc8:	9f 1f       	adc	r25, r31
    1bca:	08 95       	ret

00001bcc <strnlen>:
    1bcc:	fc 01       	movw	r30, r24
    1bce:	61 50       	subi	r22, 0x01	; 1
    1bd0:	70 40       	sbci	r23, 0x00	; 0
    1bd2:	01 90       	ld	r0, Z+
    1bd4:	01 10       	cpse	r0, r1
    1bd6:	d8 f7       	brcc	.-10     	; 0x1bce <strnlen+0x2>
    1bd8:	80 95       	com	r24
    1bda:	90 95       	com	r25
    1bdc:	8e 0f       	add	r24, r30
    1bde:	9f 1f       	adc	r25, r31
    1be0:	08 95       	ret

00001be2 <fputc>:
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	8c 01       	movw	r16, r24
    1bec:	eb 01       	movw	r28, r22
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	81 ff       	sbrs	r24, 1
    1bf2:	1b c0       	rjmp	.+54     	; 0x1c2a <fputc+0x48>
    1bf4:	82 ff       	sbrs	r24, 2
    1bf6:	0d c0       	rjmp	.+26     	; 0x1c12 <fputc+0x30>
    1bf8:	2e 81       	ldd	r18, Y+6	; 0x06
    1bfa:	3f 81       	ldd	r19, Y+7	; 0x07
    1bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfe:	9d 81       	ldd	r25, Y+5	; 0x05
    1c00:	28 17       	cp	r18, r24
    1c02:	39 07       	cpc	r19, r25
    1c04:	64 f4       	brge	.+24     	; 0x1c1e <fputc+0x3c>
    1c06:	e8 81       	ld	r30, Y
    1c08:	f9 81       	ldd	r31, Y+1	; 0x01
    1c0a:	01 93       	st	Z+, r16
    1c0c:	e8 83       	st	Y, r30
    1c0e:	f9 83       	std	Y+1, r31	; 0x01
    1c10:	06 c0       	rjmp	.+12     	; 0x1c1e <fputc+0x3c>
    1c12:	e8 85       	ldd	r30, Y+8	; 0x08
    1c14:	f9 85       	ldd	r31, Y+9	; 0x09
    1c16:	80 2f       	mov	r24, r16
    1c18:	19 95       	eicall
    1c1a:	89 2b       	or	r24, r25
    1c1c:	31 f4       	brne	.+12     	; 0x1c2a <fputc+0x48>
    1c1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c20:	9f 81       	ldd	r25, Y+7	; 0x07
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	8e 83       	std	Y+6, r24	; 0x06
    1c26:	9f 83       	std	Y+7, r25	; 0x07
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <fputc+0x4c>
    1c2a:	0f ef       	ldi	r16, 0xFF	; 255
    1c2c:	1f ef       	ldi	r17, 0xFF	; 255
    1c2e:	c8 01       	movw	r24, r16
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	08 95       	ret

00001c3a <sprintf>:
    1c3a:	0f 93       	push	r16
    1c3c:	1f 93       	push	r17
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	2e 97       	sbiw	r28, 0x0e	; 14
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0e 89       	ldd	r16, Y+22	; 0x16
    1c4e:	1f 89       	ldd	r17, Y+23	; 0x17
    1c50:	86 e0       	ldi	r24, 0x06	; 6
    1c52:	8c 83       	std	Y+4, r24	; 0x04
    1c54:	09 83       	std	Y+1, r16	; 0x01
    1c56:	1a 83       	std	Y+2, r17	; 0x02
    1c58:	8f ef       	ldi	r24, 0xFF	; 255
    1c5a:	9f e7       	ldi	r25, 0x7F	; 127
    1c5c:	8d 83       	std	Y+5, r24	; 0x05
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	9e 01       	movw	r18, r28
    1c62:	26 5e       	subi	r18, 0xE6	; 230
    1c64:	3f 4f       	sbci	r19, 0xFF	; 255
    1c66:	ce 01       	movw	r24, r28
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	68 8d       	ldd	r22, Y+24	; 0x18
    1c6c:	79 8d       	ldd	r23, Y+25	; 0x19
    1c6e:	a9 01       	movw	r20, r18
    1c70:	0e 94 59 09 	call	0x12b2	; 0x12b2 <vfprintf>
    1c74:	2f 81       	ldd	r18, Y+7	; 0x07
    1c76:	38 85       	ldd	r19, Y+8	; 0x08
    1c78:	02 0f       	add	r16, r18
    1c7a:	13 1f       	adc	r17, r19
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	10 82       	st	Z, r1
    1c80:	2e 96       	adiw	r28, 0x0e	; 14
    1c82:	cd bf       	out	0x3d, r28	; 61
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	1f 91       	pop	r17
    1c8c:	0f 91       	pop	r16
    1c8e:	08 95       	ret

00001c90 <__ultoa_invert>:
    1c90:	fa 01       	movw	r30, r20
    1c92:	aa 27       	eor	r26, r26
    1c94:	28 30       	cpi	r18, 0x08	; 8
    1c96:	51 f1       	breq	.+84     	; 0x1cec <__ultoa_invert+0x5c>
    1c98:	20 31       	cpi	r18, 0x10	; 16
    1c9a:	81 f1       	breq	.+96     	; 0x1cfc <__ultoa_invert+0x6c>
    1c9c:	e8 94       	clt
    1c9e:	6f 93       	push	r22
    1ca0:	6e 7f       	andi	r22, 0xFE	; 254
    1ca2:	6e 5f       	subi	r22, 0xFE	; 254
    1ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	af 4f       	sbci	r26, 0xFF	; 255
    1cac:	b1 e0       	ldi	r27, 0x01	; 1
    1cae:	3e d0       	rcall	.+124    	; 0x1d2c <__ultoa_invert+0x9c>
    1cb0:	b4 e0       	ldi	r27, 0x04	; 4
    1cb2:	3c d0       	rcall	.+120    	; 0x1d2c <__ultoa_invert+0x9c>
    1cb4:	67 0f       	add	r22, r23
    1cb6:	78 1f       	adc	r23, r24
    1cb8:	89 1f       	adc	r24, r25
    1cba:	9a 1f       	adc	r25, r26
    1cbc:	a1 1d       	adc	r26, r1
    1cbe:	68 0f       	add	r22, r24
    1cc0:	79 1f       	adc	r23, r25
    1cc2:	8a 1f       	adc	r24, r26
    1cc4:	91 1d       	adc	r25, r1
    1cc6:	a1 1d       	adc	r26, r1
    1cc8:	6a 0f       	add	r22, r26
    1cca:	71 1d       	adc	r23, r1
    1ccc:	81 1d       	adc	r24, r1
    1cce:	91 1d       	adc	r25, r1
    1cd0:	a1 1d       	adc	r26, r1
    1cd2:	20 d0       	rcall	.+64     	; 0x1d14 <__ultoa_invert+0x84>
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <__ultoa_invert+0x48>
    1cd6:	68 94       	set
    1cd8:	3f 91       	pop	r19
    1cda:	2a e0       	ldi	r18, 0x0A	; 10
    1cdc:	26 9f       	mul	r18, r22
    1cde:	11 24       	eor	r1, r1
    1ce0:	30 19       	sub	r19, r0
    1ce2:	30 5d       	subi	r19, 0xD0	; 208
    1ce4:	31 93       	st	Z+, r19
    1ce6:	de f6       	brtc	.-74     	; 0x1c9e <__ultoa_invert+0xe>
    1ce8:	cf 01       	movw	r24, r30
    1cea:	08 95       	ret
    1cec:	46 2f       	mov	r20, r22
    1cee:	47 70       	andi	r20, 0x07	; 7
    1cf0:	40 5d       	subi	r20, 0xD0	; 208
    1cf2:	41 93       	st	Z+, r20
    1cf4:	b3 e0       	ldi	r27, 0x03	; 3
    1cf6:	0f d0       	rcall	.+30     	; 0x1d16 <__ultoa_invert+0x86>
    1cf8:	c9 f7       	brne	.-14     	; 0x1cec <__ultoa_invert+0x5c>
    1cfa:	f6 cf       	rjmp	.-20     	; 0x1ce8 <__ultoa_invert+0x58>
    1cfc:	46 2f       	mov	r20, r22
    1cfe:	4f 70       	andi	r20, 0x0F	; 15
    1d00:	40 5d       	subi	r20, 0xD0	; 208
    1d02:	4a 33       	cpi	r20, 0x3A	; 58
    1d04:	18 f0       	brcs	.+6      	; 0x1d0c <__ultoa_invert+0x7c>
    1d06:	49 5d       	subi	r20, 0xD9	; 217
    1d08:	31 fd       	sbrc	r19, 1
    1d0a:	40 52       	subi	r20, 0x20	; 32
    1d0c:	41 93       	st	Z+, r20
    1d0e:	02 d0       	rcall	.+4      	; 0x1d14 <__ultoa_invert+0x84>
    1d10:	a9 f7       	brne	.-22     	; 0x1cfc <__ultoa_invert+0x6c>
    1d12:	ea cf       	rjmp	.-44     	; 0x1ce8 <__ultoa_invert+0x58>
    1d14:	b4 e0       	ldi	r27, 0x04	; 4
    1d16:	a6 95       	lsr	r26
    1d18:	97 95       	ror	r25
    1d1a:	87 95       	ror	r24
    1d1c:	77 95       	ror	r23
    1d1e:	67 95       	ror	r22
    1d20:	ba 95       	dec	r27
    1d22:	c9 f7       	brne	.-14     	; 0x1d16 <__ultoa_invert+0x86>
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	61 05       	cpc	r22, r1
    1d28:	71 05       	cpc	r23, r1
    1d2a:	08 95       	ret
    1d2c:	9b 01       	movw	r18, r22
    1d2e:	ac 01       	movw	r20, r24
    1d30:	0a 2e       	mov	r0, r26
    1d32:	06 94       	lsr	r0
    1d34:	57 95       	ror	r21
    1d36:	47 95       	ror	r20
    1d38:	37 95       	ror	r19
    1d3a:	27 95       	ror	r18
    1d3c:	ba 95       	dec	r27
    1d3e:	c9 f7       	brne	.-14     	; 0x1d32 <__ultoa_invert+0xa2>
    1d40:	62 0f       	add	r22, r18
    1d42:	73 1f       	adc	r23, r19
    1d44:	84 1f       	adc	r24, r20
    1d46:	95 1f       	adc	r25, r21
    1d48:	a0 1d       	adc	r26, r0
    1d4a:	08 95       	ret

00001d4c <_exit>:
    1d4c:	f8 94       	cli

00001d4e <__stop_program>:
    1d4e:	ff cf       	rjmp	.-2      	; 0x1d4e <__stop_program>
